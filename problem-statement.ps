%!PS-Adobe-2.0
%%Creator: dvips(k) 5.996 Copyright 2016 Radical Eye Software
%%Title: problem-statement.dvi
%%CreationDate: Fri Oct 14 10:38:12 2016
%%Pages: 4
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: CMCSC10 CMBX12 CMTI12 CMR10 CMR12 CMBX10
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips problem-statement.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2016.10.14:1038
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 919 2014-05-19 18:42:47Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.24, 2016/04/22
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 919 2014-05-19 18:42:47Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 801 2013-07-09 18:10:41Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not aload!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def/BorderArrayPatch{[exch{dup
dup type/integertype eq exch type/realtype eq or{BPToDvips}if}forall]}def/HyperBorder
{1 PDFToDvips} def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx
pdf@lly pdf@urx pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly
exch def dup DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx
exch def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def
 
@fedspecial end
%%BeginFont: CMBX12
%!PS-AdobeFont-1.0: CMBX12 003.002
%%Title: CMBX12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMBX12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMBX12 known{/CMBX12 findfont dup/UniqueID known{dup
/UniqueID get 5000769 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMBX12 def
/FontBBox {-53 -251 1139 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMBX12.) readonly def
/FullName (CMBX12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 12 /fi put
dup 45 /hyphen put
dup 65 /A put
dup 68 /D put
dup 72 /H put
dup 77 /M put
dup 80 /P put
dup 83 /S put
dup 87 /W put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 103 /g put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 121 /y put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2D43A151FEE81296FBE
0CF37DF6A338C826464BA5198991445EC4BE80971DB687336AE8F74B516E333D
2D8AB74D362C559AAE6ACFAE49AEEF4F52E28C869222C1301D041E7A0BC1B608
1BF728EF9E98F3A12EB2714E7F16B14E055FE1FA0EEFB058860ACADEDA9D0E4C
42E3C6F1E4869471BFAA3760175F3FBD842755A9D7847EBF605F18293B42F557
FBE2715002669091BB033E1AAD657532F34F7C66E4F04D63ABB07E6CB9D9AEAE
78EDE8B79DD9BC87A1FF445EAA05B5572BB880E69F4DE1F82D7F0E9980AB0C18
22C448B0B1722D3CC33C56FF287CECB80658B3AF5E7675BE82CEFF3DAD5942EE
A03C955FF979E41E54BCFB5316A9AB8945C403A73180D0961416EC9C92F49811
4B91BC4C788392994587517718521E416D469F69952149FF7F9224377EBA1065
4A727BF806A112A7B45B0A1BA1D5A23683960575368D9EAC8C04753BF7465AF7
95F25C258C63E4FDFFD0B412FD381946AA38C0B961652BCEC30322C47BF4755D
9F91880688AF066E32FFB22E1A52DE741307AD3ED830D6BAA1D1F562919666DC
5E8FD9862AC8600B0AE0BC7FC779252AAC57248744ACC8A8AAFA836BCF09B0DF
9253DFBB1CB77EA8A59D42D1B18FF25E9AED72FA62FEC3F126F030F5D7DED9C3
CF60FE890BA4A48E39E687BFFAEAB96AE542A6387F6624486037C8924002A511
BEE5FBFD780AC1D4BEC3FBC47A930BAD0280D444259528B6C565DE11DE36BB65
9BADC55C1EDA1A80458E98896D782DFB5C137897419602809F9BF8CA39F00C68
EFB9E076FB324C2963F23CBFED28B9EF70EAA4E4B903225D1F199A7162AB239A
D92D71C18B1B682D04C6A48926275BCB16D413B2A0E953E1257E0B12D8B717CE
2EC84CFBC046A4338A69F454A469B12118E562B4F56C5FFB3CA5D357513E6FFE
947A564B229C7FD873057D5C7CDF03E958294A1003B37D8DF565A70A00A3734B
0138AE5277D383D10C2BD853EF806D3CCDC47739F0E374A3DF3B63638B949ED6
4EC25869DC1C0B1F4DBDFFCC97382841D8F10F3635C792139A1EC462FDBA379C
BE0990CA2E70FE73137AFBBF30CA54954D7E7377CC50BDD780DDD4C7FDC77AD2
F3EB1169F14A0041F18160F43C24FAF556DB5D621709FBC544CE55424F7446D4
6AC07A51C8CD5161AB0AD5084A96FB35D77F1CA155147DEF8D7A590EA6939514
D4A226588295CE0007BA8A550895511C8D80BBE5CDFB8A50D249C3BDCA974415
F5557914A9B805782F399E4078DDB6264F1A49A9A5BA45E284A5196E9828EBA8
481D357B8D9E6ECA631A6204439FDFACE7D7E6A2392726107CB7D2517CD19A24
FBE592C119626DB221BBB635B6EB84845C16A9585282E34958B961F4A543AF9D
419B6A9105BF185FC767712D923437BE08A9C0EB92AB6792DBDC671029B6FCA6
7F717FCE379C0F3B51C6CF042A762ED04898FBB4B0105C3C4ADDDC18C51BAA3B
70A93666669547081D9246732CFF74C83EE90DA17F5B4F8BAF47FE4D81590988
2858C9B96071341FA0A0D23BDD4947FC9BC2297913CFBD4FD6CA4303AB3179AE
0203F1BD502065F90CE9BEA3B52DAFE4A29446082EA0E6B1D7AF1F31D0AD02CC
9A7FACE2CA86E5FE0F6A425B28A5940ECA306891CECDB3CFC7A5BBC76B5D9E8A
C754379ADE80B4D72CE493010317BF21A0CF4A0A55C1246218839DCA3F4D626D
1F4161D38F54AD5142C1CEE95C61D8BB10FAD4B772F4955777AFDE8AE5A837C2
A2BBB11D0BF5DA2E63D0B75ED421DBA9C789B281B01846B65DC572BA69591969
21265DB722AE86BD8CAA3D887C975A617ACEDDFB7AAB341F47532AC0F354A530
7662C089DA3939588774FFA16FC4A52555DED6D6F51DE718BF5F345C23C90198
17B77CB8B5D53A5CE7A79F3E286B6A59F3F6178AC8BF15C0A15C1A8A95D03B60
30EBE53DE328CE085CD9A1D49C69AA299C5B58B24334A546F6E274C1B534DC8F
3289553F560C2F81E413ADB92FA0E7DD1C2F39D5FD268EBA97AB7335ECF28257
96B4EADB7D0778706CB41C7E9C882760E7670936774A1088FFB2011115FDADB3
B69EBD5108760762521C25C968C3E282DC3400001AC8FB1EA27FF643E3025950
1D617BB8BB321281708E496277E11DD3AE0023DA9F25AD06B39C7CF527FED27B
57397E88D3DF70EE4FCCEFC8A0927D6B05517E571B3E70ECC99F3CBA32CCD4DE
B8BF22626B6C94FE65598A88AB90D238461EBD9A098DADEA4091AF1CDD7560EC
8E1B9BC2321686E1759E6B8A270C8CB4A254F7368039602EAEAB86ED21CDED91
8F2DB9889F46981C494C7EAF5E819B91C129F0740B8002B510014985E5791F59
B16879CC6521D8E9F1C4C1890AC85A78022BE614BEFF318AB2616F0C3F02405E
BB425D1555472A2642BA7686E431DC3FB8A1688B76660D9957C3FDE8D58109AC
21B1234C9DDF3F0FAF93BCF7B2F88A001F23162E1A13E5E9118D51B485B70A91
D0CBC39CF44413FD8686D9030782DAB58064F5B987E0402AF5B264B17BD31BD4
FDF63951BECD73ACA6138854EF35B062D01F33073850D9C09A818828C581241F
A625AB3638081DD0F00F946BE5450D38489CECEA4E66B4D85CC8AE0157E2AEE4
A22A9313829F24D573101D84CC1784D1CED7DFAD5DD966601370C6CCBB723082
A86BBAF0A5D867D0D2E3CA16E14E5109A29EF02649C47E12E88B3B397D65CACA
DEB9940B92100744D686066F8250FF30E5F13D81428EE238A2E4E07ACE0F5C38
7D79D4A336D0D26AF9C2B84088ED8ECDF94A1E3FADB45AFDAB46CAD6FF950B0F
07AA2CDF82374DA76C56D29C80138841EB13F0D02ADD32F88B23E282ECC845F9
BB9AAECE9CDC644AC2D49577A92307A83A99434F6493156DF25DBF0FCF2EC21E
8C50A312C3D19E0609C0038554CF4FEF3ACEB7A833FD54B06EF0D617C2971C89
E4C06075B09B84A4F78A82152B9A9C540B1D881313C2C74F20ED064A9606EC2C
B56D7BB4797F1EEF4A9B13579CCF311FA4A4DFA62D80FDB7F535CC6526D1AAE5
45C008EAF024B48C377522F74D939A475970533E645B1BFA81997549AFF26F67
2AAE6C2EFA357DB3B525276EF330905688777057F4E4CBF584520A534A8587E5
5A8360891E75A15205E8ADAC4A4E5A6E27D0C4A7D492216E4BC023AB027F37AF
A8DC7579BA50204D5F45A51460C5BD8A5A7F87668CA6451137F2F59E117BBE28
5C40820882A5546FA76F0CF49F8A6EC445F0647CC3227C400F56E7E9B84A6975
E85E243CC1666DBAFF4E07EEAF3AF71BDACB30DAEA792F2B8504CAB071544F01
5D66243D529C479D276FE22F7E275D9E7FA9C6EECA18716B2F213916E32C1D94
6E32397B41AC6779543218E506569E3544803BBF9B404A983EBA62A494187B30
8D3DFA4E1237A2E5E08224A60492C09ADAD8775B7CDB830520829BA164209ACB
BCDEB2D574CEBFB7AE4BE72DF4EB1945FEF2458761AD8DCC0D378AEB7DA002C6
9C14A665DAAA532B0ABA98D7BFB5A6151FF6703385AF7AE8FD315A492FCCDBCB
B825707F9566B3B4943A3C61C3DEFDC31A843A2D67AB06891F3E110DD8C73D3B
B5E4151B51D9F13905D7D94DB9ABBFCAF35F43B6EEE256B1A80ED6D1739D8D5E
8C767F6F0E8704C5345D028A2A6DAFD9BB7AA048B8B895FE9423A7ACE858BADD
595CB074A128DAFE08FDFFD6BDAC0114159A702FDCBF8013804B0CAEAD7AF38E
FAF086A3248AD4FCA1401A85AE2F72E3E6956DC0996FE8ADB18F89B14A208A15
13F81AF73D0DB72F78C4DA634ADE3C73756CAE6AF2E149C26316DFD93370BE1A
FB4A79F77A67C07CB0A53C78367F21661D4AFE9E27328E077B522B50FD9AE2E3
DA087BE481515B5DD7BF894A96A84A6C78874100505B7DDE1D22EFCE8D58B3AB
313AB5495F72E2CA4E6AE22C0CB854302B9990372F1661D9F0A517F90686F248
C5643008B3D29F7296E5C8FD4049886662EFDD4106E17C879F5D41CE84F87E89
F6A3117C968B95A35940CC29C43E1E0DEF51C1E46B676301F40D59615C3F73DD
DE37B72FF7105DB84227DA5241583272AB1C3CD97AE11C1EE98FFDB5E5F44844
8FC41BEA5C54B26341AFF6830D9D0A5A2901B0653D8BD0746838194D240FF753
E99750D3383373F453723D86BE97B571B8B84D8696089B5CFDD53E6C562A2197
A8C4FB0CC690C27761A816B441029D3D306245052E0C41B53025D8CB7267CFE3
C17FDFE348E765326F91AEB700CC49162DF748171214252CBC821493DD01AA20
417D66DF47EBEFFF3E9BB2B0A2BE7D9B8C68BD570FC2EB0FA54CECC318F04C43
19598BDE93F2F13DC7847354C99059AB20593EE51E94F9D4E9241869D605AAF4
9D9B5FD88C3798A039A67993C5EC68B6326B132E647F67EACCA7F7AE7F718D85
12666E90D7C73EF210E344964A38228B236679A2B18F5E081234CAA2458F8D83
3F0CA308D19663CB12EB904076EF88E556407C33C9380A6A3D68A9EFE65387C1
A1BCD2D26DFD2AC0881EC30E81C0A4E76C244A2BD822EE88C4A60B480D107E68
90E419A1F512E865BA922A7830909BC2611A80931CB2E9344529586726614D94
3AC5200FB9FF68AD9686506C5EFA8788C0AD0251AFE7F95E84683380CDB421C5
B1A783B6D5F3A6BD1BC1C14B363DB01C87C0796DCDD5BECF41A1A9F43183CF6B
82C2AE49F0BFDC5DEF7729F2E638EE6EA9E4D059EB9BB1B992AD8C82D501A550
1BF73CBBFE740179B54E193E84A55DCD61B343C1852780FFB44248FC9426AC94
AA2B3FE20FBA30F6C4D1E0FF3EDCDD8C0F57CCB50CDB0EFE2E04A8927E239C1D
9B026C7929BB48461D4D695FFC766C8A0E545B1BCC2AA068D1865333108E7985
2D93F9B00EA0A90939D0D3840D59B6CC0CE2C147B2E1A9A4F14270FE3ACF51D5
99F7349106165AD627CBBB0ABA01ECC6D3A14C1DC1ED23A9DB9865BB4396C51A
31ECD001EAC94B33C34E29C5611148EF3E55DD61813470B8F3CE32564C749414
3C93C77EA5A3538A0B5AE3FC4DA32813B06772E0E48E25BB39F3F6FDCC077E86
F86FA50E18FD19EB2F37311CE87F18F3BC85CE7FD71CA92D5C3264E34E04A2E5
70C79D99F54D6C6D9D527AE45EBB48411221134587D2253E7C8ED7658EDCA34E
5E768DD14E0200470F73C44D006CE8CB35DE1CA3EC10ADC668B0662A7774C891
84EC95A31DD872F0728D9F65CA80940080E04630BE4DEC77A2C49E3913C39978
BF145F8832AF2C4385EBCDB15F9D32C22CBA0CF950877717D6F1591D7C0B8047
8C9BFCB16AF7124ED83137695F3D69228DB633053208C29E0ABA1B06A7FB3EE7
5625CB44927E2DA6E038A6E62DEBDA2D96A03177982D8FA33BAAF4426E05F4B7
9C1748B3FF7691F9888E7FF864A10B9DF761A41E6B5CFAD2BDD7E1C4924AC97B
F4B352705316DD1A58637CC12D71C18A5CA691AB2AA8F171590EC24582B1123E
94D4DC587D8F99E18A711776BF4013C96446BFECFEE4C809EA94B169088024DE
0CBD20199A915AA406F0BD5F3D63D1467C49B4691AEBBB35ED6624F2D7BB74BC
E80FD92B9FD04DD9C2BE9B6FD29EC7EC07FAB447511C61DD299C783BC09AE2A4
7B3CBCA6A20C6631D06D0B2E2482A50612BB7C29B7E7D0A205EB0E8436702581
596BC996ABD58CD8D5BAAE4B1478195CAFF98FE0141287296C4EFB8D2E7A8442
F0A3AA9F9264329982532295A176BA1867EF732BBAC49AF485D9D0F7130F617E
7F7DEEF935874D55A22240F8EDE4F247D5F73481373A392D40A8076BD91079E1
1CE5998BA13D48D56B49A92B4A18430E316405D2E2E391B496A1934671FF1785
AF42BA3B2D14B8E04014437FD194455C50289DFBA61B5C377BCBDADA48E82DEE
4E70EF5E9DC03064907BCB8BE4D59DE069FB0C0CB140DA54708E630767313F9F
744594AD8A499CFEF733E640A11FD74E46A749F9C7D18D49251BF85C6EB4668D
67598C31A8F90922FEAEAD4B83B6E7184567DC798E4BA1C4C9B3461A478D63CA
054F13B502DACB674EB49D6BB935E5EC82BF99FDA7D47C581AD7F940DF4FC6FA
6C6D25D647033AC69505F0CAC58DE99087F365531A6283CB89CB644688963C3B
8B2203A94294E58739EF23C7803630A1F9121D62BE1977DE2F41687C8CAF87FE
CBD7AD3B98E0D95C8C6E1A7CCB0E09465AA874DC90A0F5DB2C5E7C130297FD39
EFE63B0350B5139D09E6864D22C3F1150B29196E40EEF9723E71158B7ECFB8E4
C426FEDCD439420B7F1C251FADA347C9A2C49738B5A17922E1EA93CA7B125B76
57449EAA9C1D591CAD327D0E98EF2D44D614EE9ED49DD31ACAC0B956620B6BA5
5BF6D08CA7541059D5ED2EF00AE2EE95488F5645BF6837D9241C0D3959B7580F
C9ECB2BCF3E65C07D52EC9CFB21C11CD4C883E44C173214C900C44D2E1E43DD1
CE8DFE3DA93C38B548BC4EC46FF91F30CFB97525E1FD4E77686433B20BABF8D2
848C1CDF1BCF185CFD7A81D2D4BB826E837E2AF35CFC4F419F698DB0C43E9F9C
B0FB628AC9A3CBE9B1FF4A067016E70333E78B32AB2D89C483834B31F5808FDB
77492E099F1504DABCA5722C7860CDCEDB2DDEB512FFCC7D287F4945FD711F28
87BC3D36173566B81FC2C1290C717A09697DAC6072408E20926D39270121CE58
3EF97CE12EDD7F87F2C8CFE36C3C0400869C0D813B71C425343EE0CDF717BDD8
409D5297D0F8F7FDEB0257C0A391F5635E0DB1116058942FF3E7C94D5F2873A7
A3B0ADAFC3835AF2BE474E6741319BC6695FB37F59AEE388F81F6E66F910000B
72E6BA7531B4378CEFEEDC79CCF4947BA1703823B5AB4F4AD73D9615C66C489D
99D68E49C9BF765B7FC547BAB9640D51D5A7A2396507AB5A4DFF3D14F52422CD
8FCFEAA06A56C6C7FFCD29C9A7A59DDD2A909A9363FE5F1E9629616D25ED38CB
E754C059E4379318CC491C3B1A90128693AC53F80F8210FAEA7EE638902A7D3C
82B95B3F5AE340EC1B648DBB9FB679D6E80B7F426D8671FE7136D97F51E2D2F3
C9CE9183E4061CA40091A2A70DBB9ECBB19CE3F65ADD0FB346B54BAB182E2CD0
EAF4C0F402C25573FB344EA771B297BEB615FCD0595172E84ED2A62FF8962634
23C19076C2A9ECEED5135994EB397303A9619C76DC55E032DA83FBA441BD484A
59F70A5110A8927F6239A14D4E223E189A5462E4A92EAEFFA4B961A2A32B320F
C2B4E8C1821FA67A655B5042C15E4DE1FB3652B55078DB123573C4E986B19DB0
1C5131F3DFAB271C30A5476B4A19D8FC922E31879C34BAED94C07A4841B8209C
403369FB8E842610D1EB4662B6171A4465FD0E819964F62EC5B0ADC92F08CF90
1DE0B410FFBAD16F6D355E8AD72CCF67961EDB6CDA82398021007C2D0462E893
75EB0710AE4A6CDD15077C9DEFC5774EF4A657734D703CE42174259B58E5277E
0DF26BF59AF8D1A3E7DC12E3C12AA4B67CF35B19962F6950C2020B698D971B35
82FF84E72F72FBB0C54A112BADBAE6C4CAA358BDE6A705AB59332C3850CA3D25
C7564499BC1319121CE0D93218210C68080AFF33420E3CB3A48BF9EB66BC07C8
A79D8CD8E78C200FF7CFA3DAED0B9E87E6141C88B436D8FCBA50AC195FCBB9BC
9512B95FE3A37FFAAB39850FCEBD4D50A243EA416E73F53B4B00F3B6EAE0CA06
0693AFFD24DCEE2BCDDC10690C4BBD7C09503FEE760A8C80ABA4CB4F2E137B9D
E84C2A7C62046C9466BF2240E2A71CD2B05928AE68403AC7D2971DF67836191E
EE8E5518B94CAB77651C1EA94240333902BD6E97FBB8D37CA8CF48FBF19FD247
FF5C6B8AB3C0920302DECDF87278C13FCFF6B78E16C2BC75772E05F668E49118
2D78018466DB26F751D90AAC7CEC8EEDAA8D41F2612CC8FB2AEEDDADA08CAAC8
4AB583421E5C08469D8D97C290149C02F18C584BF5F2330AFCE8FF92E2DF9B35
F469A1C0D61E05B8B32000D4F6A0D9B74E591BADA348B0874360F8EBF20EEC39
C37C6FC2087779FCA72E244C4B5390076A43C82C91B982B19D7AA8B61516F4BB
913C46D2F7BF945125B3C95B1D9E1C889376D26BE7933DEE23FCEBEFDB600F32
9705E66D0BBF112BA75F2AD81160B6A5A4468B2B2585EEEF01CD882063EAF647
6812E5CE5BDDA7CB599B4D270D7ED365779D880F3B795EE7EB1592E90541B636
F58F52C4B15C725E317D4086D5635E73E042A66842B15F57E1711A3DAD7621B1
21664A0E4ECF8A4B5F3159522D8DB7DA53533E24CD323F1C09151F99285714AF
04869BA3164BC3B644E9A3526503CC29B252711FA810E9876CEA00BF8608B533
1E25C67F6235610F7ECE7377FA9D38C0D698EF45DC53BF9506A2EF36F56B8A40
DAE4211CBB25C4071FF86A4FB69556C6CEF4A0E465B4C6FC243ECB5CC062761B
AFEE4C8FAC3852ECDFC332C48196F70C0E8678B579E89F5B7BDA17C7184288AF
19CBBE187386EB68FA159B1FDA971C68290703C819B872C050766546C9A17742
78F7FF6F6525471EBC3B0A4DC52FD3795DAA9F0F902014E3E890B73CB310A292
28986DB943852BC459916E5433218EFA3ABB7F0E0A73412F386085834BBE9843
FB18B71289519C1C0DB388C3FADBD3B51B3843DC03CE3C79CC2777CCDEE29C7D
C1C550174A32B2EAAD04FEBF8A6602D62F1A030D86B950E5F0FF9503FD76DA70
F36CB45ACA516B6C3A2181E864FCC9392EEA58B6841D7743312C2C9994A5440E
DFB3B8693A87DBABBDD75EA6920E2A308650941064E8BED4F325BC8AABE12F5B
CA12C81BD6DD5272CB210536002CE0527275223C468C2152BDD6AC26A09F3787
E30D2AC8523A7B0B2652AF025C0E1E006C61BAC61400FCEC6ED98970527EC9E1
AD92815A041553A8326EBE1DB40DD934BED71F6B0D8C117630B5B52D1058B3E8
8EC0DE48AF31DD2E03D8377986843AF5C79EF5B76D92C037BC81909AB1EDEADE
C449A9376CC2E504A6B52087AD00ED140725C03B4132B7BA9F7FE17BFFC5E047
D9FA27789C4BECC655B887D5DB3F1A7A919F36B66E813029A74DAD9E8000D603
F7BDD1D691CE893A7E7BED15FA89526691C2EACA086B6F28958D8A822E04D4DA
0488183B7CD4B59BCD159FC0A000D0F81E90191EBE940A1BD676A0B18A2EDA21
D68FCA3CAA6A0CF1DBB3548265315874A783833E626E7E09C84F92FEFF9C69FE
A406A940E6114E74245963373EF98CB33DED8797F619EA3D9B283F79C1ED4481
24704A0547AFD5C48F8C3B98627D159C1CC0DE3D1A30929037B985CA5426770D
072469D63DDDD81BF2693ADBCD7D8D8E5E9440AC4259F639B252A65C2506039E
5A73EE569FD61A0B76614B30135128A69C8A88456948510857B2024E978A72A7
E2A4CE8049A23DFBA40729269E301F7AFEDA2FDAD1EF75762D1014E292ADC7C1
D1AA6F01B9B2C3082C393446C638B73EF011DEE74403F4C01C5EE91C0C018BEA
BC27D0EACADE8F45BA2291D88ED261EDC0D6AC73D307CFCB74E1F0110553DD78
7431785246183ABE86773092915F590CD96CD84305F48F70233F5607A338ECB9
5F4ECA8379F7F7BF66D87869EE0DFBD2DB0AA80F2FDFD35C807F280CA8CA5038
2222FCCCAAB3477F48A0E97C61870E0FC0108E406D58D8DF0D20C9532CF26446
D826327E2B10302E9E0F2F6541A8E8224563D10A8F9F51350C62EF56537BA832
D0B0D22297F2C14CD7EB497016B07DFE4BA68639793B75DA35C5DD5F4159D668
2B7ACB284820EC54F1F241013B04E3AEB057E54A69587116CF1991A2A1179073
E882A752A1060086D99FC67DBC59BC31161466A7E0EFB3F034BA390D181213B2
80C480A6904B1BFE4DE0BD75D1C848293469223C0E8C5059B2DFA49319ECDECF
5DE72AF0AD8E96D79485B2C03A2FD86EC89FE77D8D73A2BBE9433F32A4B1E22F
EFF3FD0357AA34708FBC5F363873C6D14FEAC85F3EAF3BB3E2867A2FA28C8DFA
ED01831F27873B8FD91CFA03B6FC0403DAFD8A08EE556EC3928239DD2FC6199E
C8A2DCEE95FCEE8408894C39F7B352C7E6373E63D5A22ACCA871782FEC05E5C1
A4A8208AC9295F40BD1BF904543B487FCAD62A48D90CF46ACE1C9617477A8DEA
8E9DF38964E41263169FFDAC205B94DDEA85E59ED9410F4D901B5E3FF2869D8F
0E7364AE654988EE17DB5135FCCEC9F1136734D86C2BDBE08AE58197E5A0247F
F6E8F941928E157CEA07B780103539C97852ACDBDF7E54AAB9BA1464BF131041
1E8E77DAA89700461C73AA4F10C302981ACBA31FF745B6E190E53991DE9E3B39
57C9C3B12CE5018AF248081675E20B6F425E6F4B3136140A2C165D868B27100A
8CF812E0729E25C98D059E6ECB9A2462CDAAFD8FCEE329E28588E3D8D657FB14
C05D6E2909E706B2712364972B042414AE3445AE0228CAE8C6F91CC389276515
C3AAB9D7A991239E5251BD87741FDA5D2154C0DDFE5C8CD7C1B9A56A2F4B7CA2
FB389F3001E0EE806291897BD0833ACE2FE28A099035D310C7E6E9D2308AD4D9
5051ED77F8905D494C14B868628569302EFA8E714A0E7FCCED327188B1931CE4
3C0ECA0BE442AC293855E82C44E7B714D862DFCEBDFD7B902312CEC2127BEE18
F701245D1D86B14BF4146035DD0B70B231B164056C51ABA14000331F2D43F511
06C5D758FE5C488766B56925DBC4D34C5EEF37689D7550FF5EF5E447A5A9869C
B9835987C7068AE4A54A73FB6B414050EF3F6B24CB41B8FF5FDFB2B3D6CAE9E3
814F712C15585DAB573A2771AB50804D1728779F38AFA80E77D7CFBF1E538AD5
82AA1797DF99472DB13F4B2CE48CE8A3F01EB9256F11B69B258156FB30BA45C4
31A34B7E59AF32B67F1DDBD5EE14F0148DCE37F6DC4B26EAEA5F8EC48D93C607
B35335F1FAB082F683B6CE92EA99813D220FE89742717E5D589AA95BACF317F7
026541F266B3895194BF1C18F287DE13DA4920DD1EA0FE09FCE840CB6D89E7A1
3D49C9AB8407BD180FBF51FD22821EE8D9A4F6BE8974FB53700CC88FB1790BFB
FD9101D47E35946A3371123EC3AACA9DDB4D0A9CF73ABF28667BDB2B79A6C97B
F1062460C161D0B14C4F0DB6DF175FF24F7D64F614D0E50AB62E19119E3CB81D
E67E9303CB1864D623EBB328C65932432CD7CDF48A7B13E4EC3FE7564EA6520A
5948FF31BB36E6329F670266FEFC1D00A6232D8691D6310F565C84E5A8B27760
308461E5DDB4E572435A549D1BE1467EB57E11F612457E76FF2D1642E5AD2080
DB61DCBEAA2DA6B8DEEC8F7FB2A3EF9A16A1A62677115C27832855CE5132AB0D
9502B7EBC842E6A60B2B5D8643F39C51C5D3AA0CF606B95D1BBEB42A7AD32854
22415EFF8683C80598E4A0481433EBC0AE511FA4C41189A76A4040460A7923BA
EAAA9877780D0D5683CA023F150ACA603AABA80EC80B80BA1575B46ADB4C4F48
4F5700C337256F5D2909CD85A9D4D71E0306B525A6D80AB29F853A3FA56995A3
738F2DF748BBCBDCE9562CAB48730839BE8FCB79B8CE0862E6840353F39B8946
6BF92D308BA119BA55CBB79EDE0EC186CF3C1A07BEF580850AA48465BE5C8D4A
1F711EA5875D7E5B1EE97BC56197B35D969ED4495B9435681EF52C8D54C2C283
8FF5CCD1D1E75B1A352B5595560A0E60BDB7593283D49417DF80DB56E28E37B8
A1449BA0524872788B37D5ED78FA18C26EEA55AA3DDF5D31A2E5E79ADDF618BC
E630841E611F62C63968DAFF7B13143454BD794EF79874263AD5C9199F5EB932
36E65DF9BD98D1D50B0EAB75724A721C2100D78A51C8AF5AA691A93F2BC536AD
A3D625866CE85CFA8E0AEC96FE1E71B2EB7E71E63DAEF052BF6D7C297707EF9A
37332680BDA66B52594D58815CDFEEDFD4C00446FE64187FB250ED05C8D84753
9FC0E88CBFD561F3B6C5B9DFF55ACCC32479FCD8CF490C466A140BB220D46B69
E912C22D82D4CF97B4E3D6B1AA3E23C10BC44068FACA30A317EE30FB728E137D
E0C5BC50ED5319794C4967BBB36B0D9C0D47A8CAFDB8B2C3BC4AC9C31B660FEA
B5ACF63FE9A7790CA4C01E374820EE8A98E673AC5C027C3A4986B521D933F9C3
4286748C4E1DA08867F0090B7FC642768F503D4F60FFF76715BB893558E11056
6A42E33A43592EAE87DCD55501E40A91D97488BA8271F89CE8A71299FAAE9C6D
B5656CA75DD6294C8FA879E8A3F9453F31CE471BEC0AD90E536E69757A5BA59D
46A448D60CF8E94A95089131C318757EA8F8FD846E5F3BBB9C3FD4FD580A514E
402C3AA287036E95498AF5F0D77393B940A5DC1FC62794FAAFCDE9B7253AD47C
FE976BBE889690CF029410237E205612BC51CC432FF6F792EF019300D6AB5D95
79C57EE5792D38931BC23BB1CDBA49353E50DDCEFBAB9417C4A0177D88552A7D
311F4B7DCAE9619544FE8C01AF150354C0841F7A14945122AF613027F4D042F0
0019E80E2E0E0554BAB96262E3D28C3E9450DFE54AAFE8A2D0A08221E5F23CE3
A9EF8897B1BE54CD7AB138760CF2E92342EB546FAE2E896E66B5145195FAA45B
80E6E2FFD2F465BAD4CE182A05C70B6412C4E43733B9B12F8FCF194D04D3FC35
F6DC27005D654EB9E7E267DE5E1A1E17BF4A041B0A38ADFBD229674CFC8B3B9F
F3A14DEBB988FF878E25523F16B4D6F05E01DBA277654D11F17897F6E526D137
0B5C022C285EF7035402777AE6235F516E109FD9EB1E43627463D8128E8025F4
719BA28B6D3F4C04C2BC9BF5A30E2A124A75C73306F7975F7056CE77C0F6F505
041ADDA5C131AE6097C8070F759B01809EC73BABD4C12CD83E1D82701F722F35
04BAD93B4F9047F318F613A6F642877AB61617B77CC6B6DF0E0865F33BC60C96
35F5A3C191E2796408AE648C15962427BC0E0B5AD331E480D18DDF3D6233E873
E20C88C998B3AA1526D8152C2491F33CF94AA3E7068F03DFB31D6AA477D392BA
6CA65017ADB4BC0F250C162C5395B416A696720530313158E3AD9010D80F0DAC
27426886199E1F4F3636310FCAEE6F726616208D56CB1467C33EC0303BEBAE68
D6386D086F45B331208C1B27F33FB6A37BE1CC72FF4BE3077B04B56BE43DF441
2032130691AB97190743F9BF9242822C65E9837EADC44E86938019AEF3EE7773
BDEAC9A4155BA339AEA02DF81139C36CB3B758AB8F99719264F736034CDE4A46
61D21668DB4210DEE62391D27E94E69183365D1C8432FA9C6DABBF2ED4CBA5AB
3FC1DADA114BE11134CFE70C8C4E1A89DAE02563F58C459E6C1D429E34192DA6
FE100106E168302907EEBE749F910969E3EE194B555C7F483630B9C1549AA9A3
0047E64DB90A0E3E1FFAE92EACB8B529FC9EF4872C991547AEA09D9A0E8C7B19
00ABD9946E4BFAB69D5CCB2F39EA0B529A88FDD52B303E5D3B2288CDC7A898AB
8C44D25B72899E9A1551C31F102A7E3DCE473D44573129B5784B601EF0817D93
7953AAA13C9DC19EFE1D14315FEA839C7419911B8708B72AE154C462A2546DB5
2B10FB96AD19BD2451192905B6A276EFE4604D357C153EB7267C6082A148B934
FF90EC09AC6BA411EA4EA57468091399CF47356C5D67D17C109C66F09CA81A12
967D5EC1EC72CD40350BDDBD88F1DDD790FDB288CCED4C3722267D857747E7D8
E0ED81816ABFD0DFBA52974607F12871B5914418119CF78134B482BDA4338A2C
02B3E7118970A0138B636BB361FDEDD26E88E22377836F0A18DBD8B2A5181C15
35735781F5A71C50594C551983EB8B1198E4CCD0168EFA4A792C40683A0D5381
EB2FA2C99028E4016D19937A3EAFDF85327C5971725C09F7B5D82F98B161CE16
28D0B9D7C104C131E541974803CF9EE3BC2AF36C32F2A170A2842804AE84609B
5FD4A5DA4B86043F11ED31986E4893A61A321B7CF95EF1632340D45EACF70BE1
670F041F32B2594637A26A35E337C193C04C69F1372EAE380C0B7CAA2373007F
EFEFC32BF2B884D020124B1E73F1C425247470ECFFFDA69AA99067E0BB8F1061
A90EE7AF986293DA4D64EA7EF5C3DB80D9F5CFCCFC830B3CF8106AEE59957D0A
9FBB99F0152AAD8CA2759CBA0B444FA3EDD28D48B3A07A7F878AD6F74D74F9F2
307B28866C355F0A036323649475E547760B4FAA85795E8F4646E9DB291CC936
E1282A953566CAF6806B0943B8F5015BAEECFD01315929B46FDF43144DC4CD99
B150A2B02DCCE918E3275C2A4DAB35E37B1A574112D5F7AC5B7AE43DE2069D8D
922579D67CF7B9BFDCCA176D4E581B5BB73DFD937101C5FAC3D34075E9CEE1F7
E74A00FC2BC0CB3B46285F9929E7103E725DACABEC521868C18239FD1ECD5C2C
ED3A0113372AF8B6908C2E2250CF0AF64C287689DDBC2B24C5A653E193E2C945
8CFA86B9328AF18E7D4784792ABA0513C9D5CA9DC6836614CCB5F1A44798A9CC
D80F48D678B31608E5867A686F3023A3F5431A30477E9863FFA65F0704FFB07D
BCEB74A172B0D3001343C77BC7255291B8480A2B779AD7B8ABC9E2A6510D6B75
923F9C03C0FDC590F9F8881CA4CCCBF6ACBAC5256F0FB60D508EC43CC6AD0332
10D5B7783887B9A7CC44D3BE414993755DDFE1270F6A12C110A94A27B564459D
DDDB42C32B59D67652071A7C75C620AB89A7F9BCF9F93CCD72D997F662904862
31F0268B22BB4CD021B62588CB106BEFE9033500C2D7A8644C27CEFBE952316F
123FF92E0D426DB6607DBFD93F2B3BEC5DD952A7EDF4C21D4D6426055242788A
1DFE0986F1112C226E0EEA66D94B76C905C691F9886CC30A6737DD64CD855CA5
C91FC2D9CA0B3D0BF8E12796AC38CBACE92D7E24608E8CC6E73D5FAEE0F45D21
8B63E2ACF56F33B672179A2FCB5432EE80A738E2F8543531FD3CB104CEF04FE0
5A84394654D4ACF8496E2CB3DBFA14BA5798F7837BD0CA59B3B5ACD45B9C76F1

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMBX10
%!PS-AdobeFont-1.0: CMBX10 003.002
%%Title: CMBX10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMBX10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMBX10 known{/CMBX10 findfont dup/UniqueID known{dup
/UniqueID get 5000768 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMBX10 def
/FontBBox {-56 -250 1164 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMBX10.) readonly def
/FullName (CMBX10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 65 /A put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 114 /r put
dup 115 /s put
dup 116 /t put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2D43B233BABF23DF8DB
B6C2BD2F04672F9A3B7FE430263E962F16A948319C51B8ADE6E8A80D3D88023A
6DEA4D271676C2C8615C4A0EA7DC8F6601610F398673A4D4B905F49EA868FEF6
39BE073001A36DEA6C08ED51452F062B971740019692E221F4455EDE46AF24B8
407A98B791F6AD525C72C09776247E194043281D04FE1CD1D8AD8DCEEC3045B4
F95B3B41CD3300768D8A049815348BD7AC1004F5500817E3A267D694AE108BAF
285B288FC5F28A03E9D34FE5D9B2F9A9BB26ADE66B1CF8EB5BE606E83D213C33
DE083C20D636EF780E761944FCE3B8A950B1E6E7568F33B557C6D59E0CEAF185
53E609A4F58AC4D5269116F958C4D115C44B5A6DABAB79D3BB6E60BDFCECE108
74CFBE258779F32C80CD7D9A7CEBA50A0966BD9961F71560119668C4A0C30A5D
ED91ACB30940502B24F33906D6E0F16F81DA87EB6D7FC8B7853BE388C40D75C2
2CA8F94713AAA1561F5321CE97997CB4AF0E37F44E25B0F73CF4986422B1CD89
8F861CA623004ADB1C28268D7F8C484AA10C9519B6AEADC95AFAA3304D60E85D
718B2F67D2B734095E5A92C90785252C98067DC05137BE735220BBCB7C341D61
C4B98BFB1EAF883D38D7A93195A059EF82B42027F23B6CD633231D704B891A9B
03D11A646F13898F20321D7BC150C63FD6DC6BF9CAFD8DA759E95384B729A0B2
767B9F3E55C682F7A248BC1184F7D294CFFAE0B246DFCC8F215625DDD4F49F09
FA8D41CBF4A06152FEB152C61539ADF7E70A4D23AF8267D25CE3B12D39D62377
547E2528D18DC4134FA3BE0437EE0B3509223D71F06D44C6227D62BD01AC0A2A
3EDA975E894371C07CA1027B102549A7D552FFD25ED2DCC68E29E71BBAB43C62
57B0BFC6A953ABC2EF703F35D112F6B5460018CDCEAD17F149DBE5B52C2B9E10
9818EA6D97C8AC884F6841C9B600A7D868F59C1D80E98DE0741D06D69858EC84
1B33C6C9938B7E8A6FF6C12AD456EECBD3EBAF0D7331536B9F6422019FAFFFA4
822E79D6D89D6366DA636CB708894FEF904F366E295F1CB808E78E883913C4FB
1631248ED6A7CF1095C0C61C4F05E4B9DFC47533A5FD24540AD71A0E2907B98B
28085EB88ABFC3478C9644594C7DC4244ED5A7C1CA8D960B65497D56D174645A
B88F12C2CF0A807DA314017984CF3C4FB7F47392A651EB9CFA961B28E2989893
9FC4D97171BD5338673F5D1CE2C3C08D48A1B77769F01D5058236C655FFD864B
80E28F900191D4EB349AA5E400A7B0A0FCA0F3E79D7A7C69775BF754329397B7
D18B20B2683CBC4A19729BA878B3C17EBA0A7E9EE297A5B67E915CAD92C8F356
582B8299DE6A58E73408F525F7EA895C48A8F0D626A06A96A50348DFBE479D89
4272576FBB0CD332193D28A8F11503BAE98F8E1D73CF5BCADF23DCD4E6586ABB
323568F5A34E359661074D50CD8D9DF27191FCE24F10225A5D721EFDE2547E1D
CA998077D2340B1A4ADFFF570AA677CDF3305D5E3A394BB1626EB35074D4EEAC
2F037CA2EA389F7683FD17A8E07C12B4CB3BA8C249C9B12D297C618009F76717
0EBF5F2DD39A6BDA10A2E5A811D4E190660F5FDDBA29201B6F8042620397AB2C
E59267A7247B0463891831A6F40582BC3F614E5167B646A8F53D8A31717DD9A1
9034034E705BA7884F0E0738307AF69D3517147C282747F2788462FDC4336A4F
9CD222908401A25F0A1F7B13B8DAE622DC965AD0BE62497420B70C04AF432237
E0FDD043456187658ED93B0F9822A3998511DF05E59CC85B7B9992CA0CE3B814
9723BAE70D2631F32B4BF93511F67179FFAD2075E1591CA5907A4C67701B56CF
A5E5B02EB4A842BA1F18D6864E5677359C2FB4AF5BCBABAFB053F230CC129B45
8D15413F736EB07C571521C7DE2A13F2AC1C133D491B0A607197BE9AA1231D96
BED7968788246B2E4D2BD330F802810F5BDA3760FEA5210CFC6F54748FB1D921
5CC3624BBA5B8962AA7D94159651589540B17CF7A785F297264F9C1006D36928
6E2756D3B623A6087E4B106FBA76255903C624C07E18A1AF4E185A533C640711
86BB477A906ADD36EB6C8F4A12BC2F01B2B98412E4E105977640930CD998D990
0254A1E5E9843B7A8ADE0AF6D5871E6D3D666465AE69813A2E26333213FF6713
6F08D55A90C079A56E1B9AC655F720FC22B5AD8550FFF26DA7B0C5A0B60DDB05
64E8FAF684F3A455BA9BC9278043D79537D201D520E38750335A4C8FEA887377
879331B68DAD6B253F4FF9981D0F9B9550ED5179B15EEEB00E560A3DB6E5973B
63403E4E2F40A3D0B937246E9652000B917B1369741E0F913C14C2D2D6D1FCBE
2CEC4422177C58523715BD070002EC2E13D383A1DC8C84228862B6C5D3B65667
9FA97E175239BB7FE7E37E14B96DD7960A8AD49DF428CFC13B5D3CC22E245317
47B5244DA97F1DF954CED2D552477237CB23D037C0DE728E26C82738954EEA1F
F34FE497DA005AF03746DD2ACF77F6E6F2C224862A1D18AF6F7A5DAF34564387
9E01DBFF49F8621C058C04C2B3F4F3033FF3E8A977B2CD6B2A3CA4A6C569B19F
C5AC457AE9AF334DA66A730960C7565E93A2D373C0E3DE14646FFDA05DF4C6EB
6D4CA8ACCA3C3115764F77B842581760BFB9E5C0EBE55308B0577A8F4D968CE2
BA3361D79378D451DD150C34D7E901397AC63B33BD7DB13C50D678F5DE999238
4B4EA15BD449C46F262D931478F5685CDEEC4C4201FC3EFA607AFB8F27AF6751
125DE42D2FE2D31DE769B7E7FD8CC8C5D91343B537139A822A5BC4160BB5314E
37501F65B4FC35475FE9E03E34CBF6795AE86CE409500BD0799DE39FA69978B6
EC74D2197C03632D3F59B85F404DB31240968FA75059B2581B101E028CDECC2E
7E5E25DFA106E9B8ADB81E82BE9ED3BAA9D03EEB22B7B67AB1262DF6AF5F5EFD
A5627EFEB84F3A5F92EF2557EDA2843D7D18C592635623CEAB14CC3620F33986
410D6DBAEF9F86E4E6682054540E2B01D8FF2161F10E66851A188BC15BD6666E
8D3F21709F196A31EE676D28A2D12639CC2E7020A52910F052E61A0710DF09B0
064171D05611451BD24FAD64716F141E1C41D3218A8115A3D73CA041D02B46D9
28C3D07DF0FB668E8E91409C8D0A26A65CD737C075E026AC0A974C9BE658199B
3B9D82ED95E4646977D8F60717DA4C68767DBD7E8320D5AA1D5DEB2E6B009759
8282F27D64F1F904830AAB501CDA4D9233FC2F12F77F0FBCC46E6B729C71F6D5
E6F3EA02EC35D1048394F4EF2177FC5EB726DE5EF2DE7997166B8BE5B5105D08
EAAC3481FC612665CA112D3F889A0E5B7843EFFCEFACA24A01B6AC2B7DDE02F4
A9295AA2409A3756BAAB44608DACBB56840060037869455BEBA46F10AFC68DD0
0563843DF111C6D34911CF13AA6023E5E899060B5EC60D0F78FDEF3E981151A9
24903EB13ED1A67EA1977449716D1A5A7EDE1A2E9465C9C2B20A58AF02D9F373
73E627CBF296B3A6A4670C39F3B5EA30D76F0362C81020A1777F0ADDBC6B52F7
213FEE1718214087837049CF2AF00407639657428B9E8B532F68B631611A3501
3D9DCA38090E227BD0D6D0FB4130EE866DB6B195C873AFD18DDB3B1E40F740C6
B3B375ADCBBF628A07A5FACED539FEDA3379D3B60216C2EA6629BE2F65199D82
FE3AE627D7C67270F3497AE75F7A9514968B5950E2D63C38DA240AF4E6CAE88E
E25167D179108679876E7C80C85FE1D2BCC2EC9B88BE76A8F5736E8E6B3A9CF9
42E58A4ECB7914865E67C1468CF66D658206830B9380FE346DC2DC4BB56A92CE
4B5E4EA9036C177869315A2D9E6CFE97E3BFD7CBE0747D40CE5E8A3A0988576B
8AD2B1E4314C0D8A0CBCA08844A49F7E054D31BA7543730C0A7390BC4A288D10
CE29E389A4791305D3AC1BB6F77C805F1032787306F78FF76A20A9E629899F6D
13356768D33D7B9E294E8CD50CBFB9CA02A193922BD9B4372C912D1689B6644D
52CAA30F7421E8114D077288119AD9514EF21E5B9989CCE2ABA0C12549FDF493
FFB39736AC9EB72DAF45E4EA6057527FA9F5AA0A1A3F03C12F7482E465C766D3
760DA7714D56C91BDAED507A5572BEB51A895F8DD3BD5AAB042650154FC7E4E5
5EEA6194DF73AC5EE2CBD4EE26E29B1D2D0C458B4850BFE842DDF2EBB4E2A25D
C6A11CA2D8F346E2B736DF88A3D57BC0380B52396A6C039212699F5D3342EB58
0C3DD5D01D5078479BD9FD10C07925556C0AB0F03606F33796BA72074549EDA6
E33644F62CA35207D7421D2727AD8419AD1772789D33405FCDDC9286BC34C974
A52297F5BBD2E541E8BB473F733AE5097BBC9D5FACF18DE4173B4711E28B23ED
16E0A6746A60F6FF903026A3900169EDA87D98396E762C2EC963D89197B8CD0C
25244806BE7CBF46BE60A8F9171731EADFC969C28679B025371E5572E52A0EF8
B3FD9B4638D03E20BFDEC9345E70B8166D38846DCA68E0D0B4B53629C7E7620B
45E0A610BCD07FEF8814CF915CFB11119F42407D1C6DC1E6353451D40A382C2E
C74DF2A4889ED5A3495C3E973565F7178CA190D22C9693C10EB12C1E7A8679CE
4AFECFC964CC98111BA4ED2BA9B10292A71D5B11870EB08EB483922CE8628A06
05E7CF6DF93E112B60EF888AA8DB52994EC33DC7277D7B7A4F913AD30257261A
D6EE80476A9A8D316D190BE6CE0046CBBCED365AB305495284FA921BE0638E00
63DB2AA4C5F163340BCCD1061B469504DEE350B82FBE1689C1B65D095405614B
35997D6F0DACA7190D64ABA351705B17B23FE2EE5996FCD607F49F54392463EC
DD5B944A4B82FA2BE3E75E2946D483060DF99277340B0AB65A2042AD088E2B75
BBDAB869D1940F64B50D25078519D18748AD64AC5615EFAAF4F3105B0111AD40
70EE173ABE6A4ACE486B4E5999158A4377FDA6922FAA6E9305F48570D14BC81F
BFF4C663E1EA9D1E050534F9315A663C4C5DA52CB02EA6408AA473C32CB0CD71
169BB43C0508A842F400240F0063243B4C459A1FCB3312C41C32ED0EE87F591A
BCB6D5D3830AE4645CB4D40336DB4AB6540B52E70E1EA415CC6D886827EBC5B3
EC35CC5C136243B0C20B3C603B648B132B99D05F9B48263ACFA59A856BE74441
FECF5C6D1FE9D1F4F9942F460961901E16017144C37E83C6822177B2A6C47ECC
6C47A1104460665E5BCFCF08874008302750EB991CD98D0D8D22B921F90B99B9
05EE7C39F2BC2A7798157503743C9F2F267BDBE2E8A4CDA7317F81DBF8962E1C
EC02822CC7F770FD4D08D335904375BF0C6DAA0510771627ECB9EE69C0F47D30
69A87052989DF80D9F4F19F75B070C3689AB3BE0966453F9D56CED6C1745B50D
813AE6D7E44B73423AB3778ABE4CD2C4DF40E14C5A426043F7057E2DFA2DAA70
EA6723F1C7967FECB1E7C1C0CA283334163FBE31C32254490170C3513580A552
19A5DD75E6C4ADCB12D33517A03318A6BBC7E4214266E125140D8C40F78A0340
1F95D9FBEC4DCC55B71E89375AA94B0D55646F6C069561480407D0A3AC127024
D7D1E9ED6B599A2A8766B8792F46D35508B66F302D289405B101A3C6BADA680D
8C56E2A00B766A4CB155446F862FCF17537A2BE85418E20CD77C4F1F69F70BC6
17BB5DA8FAA876D0E8BABE273A19C04A8697B3E3CF4725E2C77C8761A9243F24
96F8AE96399996001A57FD75106745AB4646FB9C6421F1D4EBF3BE533BD11AE8
14BFBD6D308376B26E08E4ADA490DDCCA94BE8240403D5EB0FE3549061DFB668
4105B4FE77189546619B6BCF3F9723E278E98D50A17DB8A4C46744FA21760635
5B332689316BD17C966D466AE737FE3ED7ABC443ADD88D4823A10BC9747ABDEE
027515AC353A420523F85298029475D8BFD83A2CD00C02CA07974BAA581D2215
A850E6E4C0A5E17E0EDF91C63FAC18C70093F40FEEAF0350B403E2806F4EAE96
BF616A805616EE55C4657418C26CAF54187A6684821B86A76F15088AC4D5B551
66C3CA8DC61E9810858D1204F899C7E3A1754F483134609F6EEE6364B1CC04FD
92C86EF194FA3249601AD722D75D1D395CD15A93C768EC60A486AE885683364F
93DA00A865C1035F913FDA69E7D9A0422880FB81EC23C00427F07A5EA3CCB613
83C859958AC53FAEA26A6BB39ABA068863CCE3D447720BC31A5136E08EE58963
093AF587A72112D55853A1048A2B1695DB2D7F13CC924F2F0902071260C33ED6
30893A04577C0ACF0681C0FEC23E5404F844A83BB5A2F8DE1F0792196139993C
1152094BC36A6AE5BAB4B8281E506F485F0BAEEBBE71E174B7CED1E52A8242F9
DBDF3E0FBA296538D964EB5B7A4E23B1BB0F59872C9D4FE8498203E3AC08B71E
D2B965AA6CD5D20DA6C83FDC86F4A5D68A58A72C5BB9BFE9BC755C56B24025CE
6F24443D3CF32CD711D3D94C7C1DC275DDAE3341D840090F97CB6CAEF274C94F
9F3BD3AAB3F98BA8A7B5CE5E48D1462DAAB37BEB1C10B410E8D33FA42D898183
BD4F807112D78AA94509E33C179BF7C9E82E55AA7D09E128A0DA06A330CF4AF8
5DC861498CE029CE8C1BD15C923A708F2E7AF98E4F7B34212A0CB417553C86EB
6DD46B0466F1A21D29FC5111226794ECFCA5DD4240C0B8D106CCD7EA6F03E133
BB7733F055D6FFA04EF5C6F872B4FDA3E42F0F036C4825543D75682ACF71B548
DED160ACD05625274799D0AE201305DA526E01A3D2A719B1B15C05CC09467F3A
5627860C0F36C503EE392E1786620F3F2287AFE56634E03566B9B1F537FD92A2
913166228791871A8F8CBA1A1DA634E8224058052A10FE1E67CBD3FD21A6C07E
243CBF58BDC78577847664EEA5225EB8D6679AB17C563848A9D4D58995EA3609
51C1443B752A070D9872FE1643F0677019235AC25DC2B29169D38308F2170A1A
A0FDCC59E6602197D2815B914041FFC7106DAAAF30CD97400C6D0826A40385A4
C8520119A065CF32CF2FC5FBD8DFD29222528A7F96FDA533145846B3428F8239
E50277C366418D713F84B12A5FD4F904DC13DB1844A391FDAEB97643A6FD2945
942FD4FC5A4A35E184F23304B8B4D93D0C37EFCC4E106D4FCD0DA3E5D2117589
3FFC2BD1D121026562C55C455C3585050B9460891B006F62D9D9B66695C3D348
A467C14C0256FA9621CB056E7CD389505194FF463BCC4010897F9A690EA87D9D
BB3ED4C174FBADB8A4744C6E4A44D773967FD703EC37672F9993DC48BCC8A060
6CEFE8E6B8F10886E15BA0466AF410B90DF0020FAB88BE493606B6A734EA85BB
926950EB10D2F2CFDBD182B0F133809612CCF6ACCAD049C8005A42FAF78368B9
E7684F98DE421BE0A3BC0FAEE024A7BE67E15C8394F17FE84DFD8156C2A3E94D
08259E15CC657E8CE3088395BF6B5F825764E141AE15EBD186DC049261623D26
8636705E06C6E4A1F8ACAEA59F91B042DF5DB9C2AB986A784384706A43E5F18E
42C29CC1CA86D4F247B3BBBC89F3633EE074DCA4AC15B1E33EE4822812A62E88
C32B0AA57249980EE17AFC1346074800FA529445D18649A0475246A25CF325A0
BDA06AAF392FD455218B13D9ED577D51A9500B9FB7860716A8E2FB3A8C4BE3B3
6656C6A5653AEF00184020ACA0BCCBF48BE3BF91E11C8658686C89848E714E6D
DC158223A6FA88131B1F171E129FD3D93F1D96C7B9CA647E44F7C88DC08AE8DD
9AD5CEE1CEBF48DE25B2081C4DE68DB262D48140DDE065ED14BC49D1C31A9141
525C7DA98CCE8E3196392E7CC944A3871381AB89F49649486C002BFB9868AD7D
CB5C1AAF8099653AFC4BDE0B934DBC586BB0734DEDA5444334FB5421F83930B5
CFAD1BB49419E3CF459EF266D04FBDA4D467D56929A551B8800C7A6C788A2048
7BEA2C74D7CDCB0EFE22E31292C3C35D79F9289601D571837A508EBF531591F1
A56E7D1E22A65FB87F2741DB017FE6C5895D6B38283878928E69D0B4B7D9FCE1
5EF46B077F00A027FF49E581739F38141B8B4B03A97451C9296C2100009D54C0
722BEC75EC3DD97F90FEC0044612E8EB5CA65ED931CC5E0FE1F28D6567509735
B6D2645F8EA27F25C4422B243192B9041EE87B67934AFFDAE5D2205E9E7DAD8A
3C087831F46724D977E6B768F35E7566E858B2CC4E9DD3BFC7614951C2A139B6
8C1936059511BE83E22175FD33DE7F72835EB14C8D5C3926CD47F8CD3FCB12D0
CC866F1414B3ADB8D0C7057CA3ED41F50F51F98245557B7C88B47FB90B939217
1DBF9964BBEC03013F324BD4B1E3053CE5935AE0DE2D8839376A78D70FA44F19
74ABA413D6624884D32EC1130C4E43A7FCC0FFCB223701D9052A758A98DD2884
28DC05CC52F59D616EF85F9DFBC28C80EBF44CB95368A12024C0BB437E97A0EB
B4121AF68EDC8F75DF47CCF6216626AAAFA4DFC47FF9D123C26CAE4B8FDD306B
66B9355E59A1D98F1F7053697D44C0741B8F28EE7DB9F2761DD12FB60ADA0247
C9FB6C645E702EC701B68DB40148C9FE39D955FE41A893432B8CB5E80FBFBA2F
FF1155EDDEFA2EF538083B9CB3ECF0786C7F4EF8C2A5A242E84CFD4DC50ADFEA
0C2ACBAD7686A3C54532B07F8856E3D629286E320BE4C005197209E047724453
58B5F9DE15A8D07B47ED81BD81CDBC0A6BFF8EF29877FA13D418CAED879EBB38
2A0600F3123E5BB8ACC107D8B722419A9C1F8EBE330CB37E572A8DB0D0565F05
E271CF122E3770490B395E4B6753DCA4A6667BB22C841A91A8AC118812C9BB0E
89F3D077266A39B34F4B3F800F4C6613C9390DD953FFA0EBCDCED96FF1576600
F1389BAC04F9EFA74966998231F43AB56A939CEA08AFA133FBDC57CD092B3743
A235A8448523E4FB61522B51536AD69F860DA406B0B75A27CEE1E7B75A2C332D
7F0A2D13ACAB1D2ABF05489EEEE1EE3B133ED53C51EAB75CF06C2B39A08C17B2
1FF5BBADD8023AB9D1FCF2AC39103594EC513B8D0E3767D8880357E5017147E5
372F54B764A8DECC5CE6F99021DFFBB66ACDDAEDF48DF5462FC528DFD9CBDD74
BFD2C45FD1A30675D11E8F2817E361F92C4EF485C8FD1E8D1BED5B24BC6E9028
702C35FE1AD1E853FF97236F55AF6FBCD9AF0E167742D0BD0E131BEBE6A3EBCB
36C819ADC8129883E984EC2061DFB9076663755FA79860C1C2C5C6B21B02CD81
95B2DFC7EE69059FF0772237BF80D6DDCA23C442FC7F602F7454B539410E44CC
26D3A3E0F450318BD182CB6F86A9427036BFF3BC35087D6FD299F59348E83D03
5D239244B1CFE54978102D98A02AC42F97E0A60594F529E8FF51941EDBB2A2F8
5ECF808E3F4FFD94B01957CD3FB55AC860F03B25E84E1FD6B673162DB60C0DFD
D137447C06EBD7A93A6C0E4A2AE7B93036E9A47C8B46867E4755F9209521010A
9DA6BAAF89C49B6ACB4DC451F9C298E764FA16D597879F762BF740A42AAF883A
B9A38A4C8F080133CF33344CC6DB7EEF07FC3A6FCA1100129D7F1AF9F3739F06
3D8D05B59B2A9DF0298F4DDA3A412FF4F71DC5AA368E0EA45AE3A0C9A76C320D
DC35376D4AE23E173182D4D98D4C5EFA0825D933E8F580318F2172FC810D8660
4C883BCDADDB6EF52427E0B6EF01893AA6D9E4B7582ACD74AC46BE3E8161DEF9
4D00C992E57075394491E440BC1FAC67742DFC48851CF2FB3FD9B134E7F7B9B3
49EB005E2E7957E228D691615958EBF63E296F9109677915EDEBA3654EAC3D7D
B0F23F6BA62413A6D32AE3655EE53594884ABCD9438DC463998811CE2124971A
52A5FF779385EB4DA75F7FCBD08EA5AC1920F4E395EB7A69DCE16AF779DB5E9C
C4CF9BCC9CF53232454B14C15C5E30DF58127605F77B4949B3B5E1DC217E8A1F
BD9B828B8E5DDE117195515FAE8AB259EB719E1F850331D50EF2E7C281D0DB7A
23E5BD03AE612624714E9347EB76B1AFBF0CEEF539B3350F8194910480F0F209
BB65AAE476588E98D30769FBC59E4382D77CA2CCE5EF95185D221C638D42440C
823B7E1446292E1E83326540226092FB64E999E27D331F055947FFE8F1569AF9
28D45EAD81CD008AF53351EB618A05E057650C001AB61E0272DCBD10FDD37B53
D2CB167BDAF30596267BBB68A650C1FB977045201E64134B695D6ACDE1BD7924
D3A52987FE058B210EFEA8FFFF18AFDDB577081D617807E103BE297E6EDBC3C0
8E524947A8D9C31E9C0071AB87C5BBEA97ED23CE280BD74C23F90B365B358880
DACB7F100E3DDC8DAA92921A8F4CF9FF67EE19346E6C98F132FCC9604D1645F1
AC5F879222847F8559607318973C5D9C36CD4C01B2B574AB854D1EB1AFA04C2F
1C40C4613ACE33437D14CC1177FE18A11431E4DCE16EA58A6EF30F424F91F39F
A44D0259E280000A2F51AF645F040911179C7CE6C0543CD1D732913AA47F13E1
914E22BFBCF0725FD97207BC9A0A700B1E0AEE2C1CA87487E8C2EEAEF6EAC61F
D8B86B506558C071602BC451C59A34F8E73A164C8BABB08359F67965DC08B417
31A48D9D969A7CF79B2232EFA81C92EEEB392214939ED7C5F9C8DE18FF877F23
1781F1A617F978A6837D8F353740E5AD450B9D341B3FA304A7939A55C1361C9C
C3DC569CF155DD833947108C6B3C5DF89E718FC08A4216AE5798EA85F5F07DDC
D1F73129177E79DA3C2D3E81F80B958735DC19D6C6702A7AA43008E3269EA5C4
50E621F7DFE27E56CB917FFB74A100116A49D89E11857F08BA082D9768CDD6FF
1B64EEE327225111BBA935857F7F945BC6900924CB8DD891B2BC3A900B412B53
DDB3C7E7CE47FE43965181657E06559BEE2F1E3CE6C90702F3F88600CA6F9594
2F44CD6D53FCC7ED31FD0184F53AAF74CC4171C8B0A3320932163A16A7D5D70C
5722EF2F13286CFFEACE21036BDE86DAF6701362C16BDE5646953451CB959412
83ADF2DD9BF34BCCC7B3DE4ECCCC123C7310346444BCE0E824FBF0144A4DD8C0
34AF62F5FBF11ED7DCA9744AAB0FDF77E941210504E4254BC751B622554A1E64
C01A2864291813DC2BFBBE50FD4002CAD1D54C447725D4753D2204557BD7E4D5
6FBC074980E9CB7D5C3230D84CFFC91A119D8FBCE9AB99DEED2E8FCA69836471
97F5B74F3D310350C0CA3DD1357E98A093B5FC6D91C47F604A5359F0626E8713
327D6CBB9A09FEA9D53C6E03584BBB28C04684886771364CC604446ACC6E3CC6
E3077760267EA85DC24BAB59C952B0309F9AA60EDF5F4AB685161E8744A9D7E5
741AEF440F0AED08C26017B13DE83B368605947B083FE852361361C72ABD4EE9
731DD51828900CD8C8BD48620BAEC3DA26ABF2D301AAF21C5BE4712196C5151F
2C9FDE6C75E7A2CE8C43B8A173BDC9C302D715EB69CF3D0E22D47476513A247B
E1507615CD2A43B80A127E623F8400700EAEB89BBDCF9EE0DC443893772DD949
1F5487CDD0F92E29A3FB2B4EDBA8C99AD13C0CEC45A515BA2A60FF3DD8AE1C61
8914CE6DE4A50FEA1232B561965362438D64AAAB59C07E10BFBE9E220F655B4F
8B150A2CADDFB6E0CAC4A52109946BEF3202BDB677A0CD5083C5DEC67837C097
87DCBF51439EE408139EF8354E766ED1375660B6AD0910A85DC3273AEDB2CAD6
891723D9A60C113A0A380795D4C4E357D1068463EC0CBEBFAF6D368B168F61C4
3085EDDBCB93AFEBDCF500015E8621A42DC036172641DC43EC83D265DA0C0D1C
7E860427013F33468CCF910BC03BE30375A58B56300FC4E42E97AD8A265920E0
540795490F50CE29033570F201CB12F83A3347DFEAD96025F8C29B95728C7D65
01286D965D235975102627C7696A35585DDD8FFB69E4A4EDD3DBD6072361A0AA
2AAB3D0334F9F4F0F91450AE0394E9163A8A6DD6EFE5205C3031592AAD2FC98E
6F449DC9DF6EACD7E3FA0DB304712643EB6B1EC35E62058B55AF4BE8
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR12
%!PS-AdobeFont-1.0: CMR12 003.002
%%Title: CMR12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR12 known{/CMR12 findfont dup/UniqueID known{dup
/UniqueID get 5000794 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR12 def
/FontBBox {-34 -251 988 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR12.) readonly def
/FullName (CMR12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 44 /comma put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 52 /four put
dup 54 /six put
dup 79 /O put
dup 98 /b put
dup 99 /c put
dup 101 /e put
dup 111 /o put
dup 114 /r put
dup 116 /t put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9C535A5E57376651
F6823308463DC4E0339C78699AC82C769542FD3B410E236AF8AF68CF124D9224
FD6EE92A38075CAAF82447C7AF41EF96F3ADF62F76FB425BEDE4C4124E7B1E0B
8BF254D91912D3A99557F5427907A56514C5A3EB961B94112077FE9417B70DA0
B2E1C1FA3E1D6F01D11F640CF848E45BE3E205258E64FE36AFBD4DF4E93F6B1A
966C8E7FBE2CC8FF43C1F67BF6C361678B5E90F4BA524FE8A4CAD6AB28183E6E
CA6C9636E884845105595A2E40CDBE8D4807A81AF4DB77B31873FEB221BCADD4
2C4669459704CB58A7BC230FC59F867EEADE660E49AEEDEEB042BA9A7DD8193E
56C3A36A1F639F7EA512EE4BC6992F52C2FC82A890EFDA730105B0AF7B819295
EE00B48F64C2B5BCB275B1DD62F289CDAD4AD9B7EF057684642FA6FA6322C277
E779CAC36D78F7779CB6DE12638B3C65B70C6B5F8A8C6421A379719B8DD44973
5F52856A4A29B2ED37F2B1FBE6EF4B79B7C0CD6395C756A00FACD763C235914F
847D1D99831023CE1FD89EFEC83AA7E313131C0C197248605EF5BA773D0A4000
72F607551A8EA6F0FF19441ACA179177D1FF7B423FEBDF58B0C19CAE3C10EEF6
3538D8FC4762B77C5AA023A8186C40D0365A4487DC3564265B3DF908572DEAA2
57E29EC669DD72974F806EFF5ECAFA9ADF1F9D2A63087FB7BBD100F0F81C6FFB
B1EA1C9DD46548AEDD147EE64B1B4894972DAE1DC3E8569D6A3CEF9F9E46DEB7
547E10BB2959D374A33E47C58F1B20419920AB485F166062FCCC08EB5CC9AC88
F388F0C0155027B727729488E44CCABB7064A1432E179189C4627453C5231535
47D1F2B8BA43069696830CBB6E5F9A135CF22D3D1FE490A3A63C088EA32FF444
24A2427BBA63033DFE2E06DF8CE67949B6AB02F26335A376B57376814D2A7DE7
64A4347577EBE9A6E33DD2FC214A09C6D889C8FFBF1D567032548851B8F97204
49E215CC7D222F593E1EF1439ED60AD922D41E0E9EFB5CA48F2FEFF75AC5FEE7
FB6676D8B8D4DB6885FBE8B61B586313E4DAFB09D94CEDC0507E93000104F3DD
F83865A2C6F6A7DA8562BF86F5DB233CC9B53391273A1462E40876A8AC2B098A
DBADD5A160DEAC061F86A5FCCAB495EF8A9D121AF07928EAFD56F618E4EAEA97
CF89A3AFD406FC9DE1E9769C1E1EB83BB883786BC075EB5DA2692CD59C4DD7C1
7FD2FF9B18AC740A390C1DB38670DEB18C67721A1DCD502FE7368F47DB4281D5
459B3F020595FA3B10544AAE9EF786A0645FB7C9BB29D091E1432CD878A05918
1665643005BFD9A4B0FFD347ADC84CE22D6F9AD4EDC05E8C7179DCB360AB57D1
6ABCD200A4B4AD56825DC345984D9A3DE11CDA5E9EC1E5006EE4181E4EFE0846
67D8C27BEE8F84A1E01947E945BBE988702DEB2240C4BED952E433E5305484E5
71965D3DE95C4115FF78CE9EC18E323C599727C8B93CDFBCD1CCA780DB8C81ED
C4B5E596E1603624308972FFAE9A57B0EDB51FDDB6E23EDE2946F61BEB241345
2A192D8CAD53E823D687F9C64A70A4B4B703291FA6317C051DC6A44BCCE0288E
3839D726A8F2E39BFF429865E95C726E808E02CD06F36C1CC9AC77999F8E28BF
CE9D74B699CA982479E9D0DD98EAB24D29C981EF0349721D6819549A39413801
F80182D567EE316E2F0AB208068E15693E4C399A381BF9BBA625E597E6E109B8
16F3A84C8EC92F2ADE288821092A421A8D3B907048FE947230810F0777EE2542
29A3485223FEA079B359034F70464DAD2F0E420271A4E0CCF57A0ABBC20AB327
0CA71B292126D395E0D083B19BEC6B48A9DE2BF470C3D01A8C3F52075BD4BE02
A0C518355814478202FD4762EC542F8E7B9B1F7824F0554660CEB83E35635E1E
DF0D03C94C903ECB36B4948ED98B6324E0094EB1DF70863142D4ED3A932D7346
39D69F8F044B6084482D7748C27328AFD24A3A70B99D1F7D32CB984488672254
28B6A9E9DCA2C9FF6A1B311D72413404B3CE5428BDB7FF3C36357D7975184F56
FA6B32AD54C37D0AF7576663AB1397B80D4E998F0B4C4F6D90B483029EF2EDA9
D4C4204C1546EFF3100629453EAE01918D09FE104E626ABA38646F17B6A94CE8
116BC7A8D9C319434CA5B830859B4164DFADF1D7C3ECA5C78D8DEA930EA4AC3F
59DBBF3148C91A2E807FB934E3439D4F67C6DBBA9972854E6E3688E1E0A34B74
482217CFE031CD7B5DFEF727C3EF8DAEEEDA08F4C90289E62FB2AF2357EB2E45
4BC547980FD479101FFEEE477AAC6268DD659E8DD9E244676FD3C6909713B71A
323B211E571BE711D103FA23B5B9AF077D84E2D20FEE805E81D20C03501F0F17
C3B081946CD0FD577F00E50B76CC37CFA97A61B89C25DD43911B28857284BEBB
5BEC61FFE3A14C64BC5425A7A82326617F6F1FA4FEAE56071C9F559F91568179
46369B394A5CE96FB7420FF8AB7C61CB83492FA5AE4A4B0799578594C9EA67E1
E54498AA5CD6ABA34AD3417F04F5D8D664A7EB39D41E2D17643CAEBBCCD9C38C
C5C9541641A09335EFBCE0D276A54253EFD68141807A66F1DFEB4BEA5889FFA3
4D20BD52012206A9F8D3E0F6AFC03FDBBDF3E51506EC6336E249CEFB571AB84C
BDF8E471E3795C04E38A5306BA6D450D72E50910D1AC385BB06CCD4B8E433A32
5A4B7FACC976BB31FCAA1E62DB2C4FE06DDDE7367930E336B49F47DAD91C8735
9A35D80CA2E117E86B52E41E9278046ED923454989E48610ACB3B1663F197117
52659A9D7BFA561C7ACE0771794FC778675F83C5EDCB132AF124C7E6540A140B
E0A268836C73A3C746DC964E482E63C56C0D396515283970FBFF182F9F684FE2
655FD8F5D057D22246DDC3FD11B77552DB4D90ADBAB77BBB1FB1592129DE0AEC
F822D7D36E52BCDABBD560B403A5C56C5E1BE789C3AC049318C7FAC5E5861E42
FD66C3C0F46361078D7E036281682BCE9BBF77983C93ECBBEBA9B359769CA442
87FCA1B98F4EEC4935CC93B08AAADDF355C99816453587310F08C50B9BA3D107
5388A1F3AED2AE32BEFADF0285DA90436D1D7EA85D7B9B6DF2AC4B778CFADFF6
6EEE54D1A1C5DEE3CCA7EFF57A7C2931933CEED90CA26DAAB45E4388EC4DC366
B9E88518D6CF094861D2A59282044CC06E63EFB390A6DF4BA5EAC7CE39E1EE03
3D84099F5BE96612789AF3EDED07266EF10A0FC23EA1EA97040B6BAA63138B1A
A9CB8F5DED781260962D7618EDB200C3ED976033E8967A8CC676E9C11F74BE34
343A7ECE7EE97E8F76F7E95517A6D6163527406EF5A669535CB2BF4031F29046
BB2D0FFFB47A576F5EAB1D00A582965C56F28C00B3BB7BE2CC8D8391F789070D
775EB775437F0CD53DA840BB3575104B63E4B0BF14E3F14B320EDEF65FD4CAF5
8596DA491BBCF3153DED3B718F833D106432DF8DB8B8E6B34D5308C9010A5DD0
7E0E53260BB84BAB3EA748E8D72F75901604F80F4416920D69B4B983DCDB72C5
E9928F01A4A85954FD74578AE336C782CDF81D1EB7EBCEBFBAE7ED8AB4862584
397928F502D65139CCD582CF0723C5262EE54B9D2B8C39614652A8A90E1C3B65
7D26B99DA298FE4B9A7E98848F619C9BB4FF9FD215B72F99506F06355B332689
37D80AFD9F9ACD8172CDC51FCD3A759ACA0F7D4EBB07840840EE42C2D5B8B257
2C6DB3A7657B75F2F0B9730A20112745703E2D0FE709436CA6A5F36F59E64D9E
37C0A23D6D289E1AC1DA273872F5FC5C3DA2B127F078A4D7AB3FD7E124455817
DDC796D54EF26A1FBFD539D3A21B86DD4477DA49213259ABB3FF241424F2BE5F
89151E02FF87E0BEE26E85C0E518D8BE7CC9214B8E9A9EA1DBB49C6C212CCF08
90C0F23E9858947EE344062EBD9C574979087439975EAD4E85CD7BFAD3C91CF1
EFF577843AF1427D06CB2F3BB519ED1591974218C43F0D2038665F9E2E3960B7
FE68CD3CB2DB6B36C7997C6B21EC11CF1DE049541001FFF26D14C255E3AE862C
5A5701292FD2FB3D04523D6E2F3547923BB117718DFB6E6520F0D0B5450C695B
8C9242CC8671B7284CB2E1E9EB097A3DB1B4D5E8EEB93B4DC7E38C0A10474665
54DDCBAF079B92EA494F6FA75A84C5AAFE280284D0823D7C22249A21044BB0E6
4062074ECD17B62E03EDF4945A294BFEFB51F5FD870D9D7230FC91B83C1D85A8
86CDDF326FC90E04362145D6E8630C50594484FB829DA18F5C078F2EE67D2F2B
08DFF39AE2E8C9741FA989AE494C7166F122D2C5F71B97C973B7CE8500E9F87E
D59C30F2E99CC4D34713DAB680598F41955FBDC26A14CF1E73D6BD6B9AAC8D3B
B998F2D0D647356CD236DEAD6561389ED3A6746221B0CF15D6648412B35A6B54
6A0EF5BBB34AA376D9BAF025BFC650C1B74333CE85413D0EBB2F4D082A26A5BC
3C0A25D2B12CB159F140E00E262F1CFECCB2C802FF94CD34DA0CE9B4B3830FB1
DA85B9B670D5169928990A2E9CC869891CA2FFAD9774E6B92549644DAA5FE00C
A5BE4F5FF91A0B6D2FD8F96121D766391EC4ED3E73DADD476B7DAE1A50AFCD98
DB7E27E44D30416088D9BC07D4661D9ECEC0806830ABF14CE55AA3CA2DF66E8E
748B8ED46466F1EEB072AC0674FE6FED231E0DDA59ED7C42BC05EF00E176050A
C4834D893DE42474EA20DB1E25059E84BD137EF65A02CC295B0FFDE4CDE95879
0FE88BDF2519ABAE7F8CC3E6386ED35E04A14F1E3861922645E3A3F43B48A5AA
1999A5EFE192515FCC625C829FF5A7B337AA422F5E920545F9BB269C869A821D
6C4C26DD2AE746EF0F0B4C1E7E9871ADB5270E1CA9BE28225F7A0370D4C52422
E25263EE101C4EC1C7811B05AD42F364844A56BB91EE72FC8ED53CC6954D2BD6
F945D739BE4C61E36143CE890FC0CBF2F610018D678ECF7CEAB18FF5A0E48F76
FDE2463D40A99380D679B3B76D39C664F4992D23E5988B0D1AF33DFB04894016
E852EFD1EFFE586153C0F31ADBDBDE3F73FB49C5EE64D0D02E1504248FAFAC3D
903FD44679BB09C30288139B41B1E90A10139CA3172677250B16535A1F3E5E4B
6F4264DE58896E66051FC677030A121C5A285C47B6129CB5A3998830CE070D21
2F093FC1B44089F603A21F45F60960F134A47226874C737EF6C085634B0A4A66
139420501351F737A73F39D960EC38420BE46E5B09D298E7C16B8E32F01507D4
0141FC52DA1DE718D634AD9C8B00E46EEEF84356759324D2B9A3473C5DA38DE9
E30182B87F91B6A7F7BACF29A93B44C879CCDEDB063F9D2E51E0F1FC9F018FE1
2433D85AF24B55DE3A61C4D0A2DA4FDE933F5F6FDF17E9FA9932BFC46E2D71F6
585EEF5B2E4E89E797A24B799D7F064DD1A817A53677FC9EB8CC3E7F93FE50E8
D50E3191052943FD6C98B573BDD1F6D70349E1F8011599E3F8FDF1D6E80A710E
51E434E85801617C6FD8ACCF1B77B4BFCCDD35CB4C0367F4EB4D8D9DE8284D5E
B4F43E2F8320C2C5A9AE90ECBA7E65D377E91DB69FEF27069235366AD3E126C3
A73CE97F4C90BA00D206FA012C327FD69EE59AF4470A315B1799CDC0539BF90E
512C8FC3BEFE4D1B01D969EA9E3FEF976CD6E0FA4C9ECEC955B265CFD58AB8E5
F7371E479279EE14B689269205C5B506940606CF3E24A1E7EFF3CA96ED30AD6D
E243DE57690C3D69A401AB3315FA49E4BF4ACD4DD1CA39272533E82EFDD508E5
1C2CD286CCC5DE1202C7C7F654521750632EB637F918667E2233A43DF75239EB
F28F3129EB5DEE2FC5BFC331FF709B0FE9B327CBBCE98BCA2C861C6547E50407
1218CEBE6EB5F9BABA4F2E11BCC6FB553A544A567B459E06375102C69F8018DF
BA6A227CFB13E2D74E6A521E01B74F2963E9A0A1C9FD87A88EE6356E3BFABF55
BABC751D2BF85E6712E8EF57914920775906662E4BA68FFA21AD422D34E15578
43CA0568B431101A1194F8AB1EF25E886BFCDFC10F4A5EBD9530816548BC298E
AE4A0B6B52B8B59C644C409B4191B6F4203F52314F2675F02AEB65A72C66E92A
2AC703E15D8D381522C0AC30C165B822A9B8D18CAECC094EDE020756018DCF51
D0701B507519C4270B70D8CE94B436F640C15872F9B5B77892AA3D110E4D6A65
8F0815C61A5127BA25815378683F46E69E54A391A8675977E7DF9C2D4E6FA991
9F029E50CC2F266B31EE9F9F24452D5838905F330CB7E416B8AF836C5AC26AB8
BE2ECC6EA4BDAA08C30995709E225C21D35DB6369167602CBFA8DB2697635925
969002CD1BEE745DA2E56C17EF3F0C05E3847147F86963C37A221C8827195A8A
3D38993E4939AC915BFD9A212F5FF3F826F742B952018986F9FBDDB69C3AC65A
845F7F33C55D4BE60A1817EBBCA7E1538E8087E1BD5C083A320D52953BE65F31
E8339C612A510B59CE48D2EF7061560C4AD258E7DC59694493E3AC878246F37D
6DE89253EBC8830C6B209E818213C4AC4CF1F391AD91D57BE76FB0E2924A1407
E4A949C905E44F54EAED6419F13D59942C8079336A172D4758BEB5D3E786FB93
3CBE4FD2EB53E4E1DAC34E821EB30FD44BC6CB4298242C38F848FC23AEDC9733
52BE6F32E31E25F18301370F8936810B0566B664B042C7AE0D78ACF0A87E5BF6
F9B66E358168B2CEA30DCD940074F3ADB793CDB136161FE2522905E87B8E463F
95D4DAB7E14A3DF7BCCE8141C5A08FCFA2BCE9F2D1B05A7642E75877EB840149
AAB007CD239AE47AD115929427717F219B0A8907F0EC79ADE1B901DAEE87A2F8
39361DAB43DFFF69650F601B24061A9353CFD619FF9626F63275FD09A5B13BB4
8B3379EC4D147C41197E8387FC04DA7BE409524CEF74EA91DC066808A7FD0EF3
957A44E2503EDA67B1C61827479486134E922E560A673BF314D601C66003CD07
55569085AFC8428389A140EB976CCFB8F29E27587E46C413ABE2EFB51AF5913F
53EEB74063162E0BA1E24CEDCA320377D3E11BD374F0B44E132A5C35835B6E2C
D32948EF9DC7931D104C1385709DA882DED6458319F21C2329938396BC074106
CB9CFB9E0A915F8DBC8435F386917AC87A2BA45D857EC30ECA66FB4044F5439E
CDD556B82A0E43418D179AD883C85AC276E1190CEC242E3E1D86E725ADC39E46
BB6C47FE9E17E29F8EA81E870302A00D91434F3B7A05F243176E6EF1082541A1
B9052191EE5C2B8E94A2E02DB65FC769653CA8D1C07A13CB853544AEC7FC35C5
218DE3128AA31952DCE19C55C23FD69BCEA2C661F57B11B8F9E86BFA718D1521
3346E78C701A5E51923D6D937E62FDE3669B214D240538F069A100A542720A86
31DE88116DE775F7ACC2A49EA6C02A24408271A846990669F2AF60AFAB4C16F9
7F4E88E917F0FFDCE68F22998AC0AF2A60A73258C3A4BBC42A2F918123128195
196D0E150D79AC3CF4628503D1F3FC528265ED8324E56849A47B3B07C29940B9
1BC270071E221D355EA51E9942D3BD7F99816304FFFC8F5B036C953B38759341
ED5D7B9C8E6B70C409DD8362FD291201CC385E4A98D73E8518A4C0E544152563
82032FBD2FCB6E403D34B85ED4053A8CB619BDD4DE001F4C3007B1F317579651
E6D6662189CC2D95AB85D7473F65C5D7B4AC63B0FE928F3400035D5A9D443D0D
F3532B99F3AC26CB25EA3CD64C341159061E02EFBC7C033C05CD919BBD827A6A
B36258037B5F0DF7D78C26C1D24931A18A2606939F9933100C723ED2FD991F4C
98CCB4F15E381B4886FE0E928D4989A0257051C547165291D35FA5BCF359E153
7EF69FEC09DBE6A9E866BAE054F56E86CA2D299F8DCB88685B932117314A73CB
5954C6D639CEB6F8A0A1F4D9414F1CA7CF3DEDEE81F75D8B5CEB205425442B32
8703A8A79A51613E3E6A46C9B7B1052C0A5491130E312ED3A0A2F32C5D52B15F
9621BA9E1688463FEA43F72D5FDB6E8D0739003C1D8A04E1589A7FD3F405364F
CD0677FB7EADC0D62CB762350689F751F19E6389284C97A5163CAD892E9A7043
AFEC5A36E7D86F5EE345576F3AE6927C6F5B2A095817E7796ABAAE34288E519B
8A5112A3BEF51D4F8EA23508B2A6B0B6707785DE6F4E06E3C4596AE9DBB02C42
DAC59C9C3467197D9A80E28AC5F7CC343E236869175728F61F0E96ACD3CF430B
9010BC2A3CD0B16235A41A43C0BEECA01DC57BD17E63D6BF7F64D0A031FFF05A
1438917FBEBCEBA2C98B9F1B659E5BC9E50236632272AFE697328791D7012B9C
6559425AE55499A2AB7C7FC869291AEC5FB6208159C424B359AFA8C434BB3EE9
97318ECCF9EF1A0686D57432DE5E10F58C5E4943809151944524E434BDAA304D
DC5386B7BC86D664BB77B4C56636EE981A1F965F14B6E62DECD9B6527DD5DAD5
F60B5C6F298AA4295A71351AE7681372A1C4283B21BE87E3C2AD6B5988912525
AD10853F781BE775296AE65575FF9EC5563F24848316A209EC05163378B0C347
FEAB2E1A2AE35E9E9AFE90A588DBE234B09562DF8587DD1860250E0BA6B7C627
73F98DAED19B2CAE8297F6D260A45BA45C919CCDE8A775CA7F374FBDAD7B02DE
53C75F0E8D84355C9449F348E6E61CBC2B3F2B5CD157BD611A2DEEA029D01212
F86613747201DB64BDD48AC6FE3B1947D3FFDC26769E01683B0C23AC43AD5D96
95322FA63E0FF4953613C7D167B0FBD8907EACA9985BDC3448C7F243EE447E00
8ABD6C9C97ADA0E8A4770761928703FDEA24D50160D6B2D79BB6535A85E68E77
CCCE774D920CE539E350C221611A5A636EDA17EA06B298EA226D4909B7D98D6B
226EB7F5D2A7EBE9999407C6D69465C336E9311D344A0152E5227C75FB03826F
BAEB399A4C5F9C7C34F42419C72B22C1FCA7564A2AD7A23C7E0EFD00EFD89E6D
DDFE2C1C9904DF63C9E2A73B5C38D03B242CF172D46B6B94412ED1C0D6AE2FE3
6C2BF8297FE073184E5677A566D3DD23A202FFEABC73BC8C194BE833B39402CC
65AC908703458F924A03C62EA1F1C6B29BF7371165F804D5A8BB993D2D8A592B
09AE043E48B54B596587D602BC584BE64AA8AE49704BCA27172B45F7109818B0
F844D9F796EF8DC4AFC04FA6D8F99532973EE79859BF0557114E3E944CC1B004
08935529F18D583EC21F2ED9B9EF8080268148625AD66A0DD45BAA84C4B05E90
DFC1698E493C4536BFBC6B3B9B2B181329A1BF23B4AD2729C374BC0862925BBC
2CEDFBE5DF85DDD5EC9DADB58B5B306394FC374195943F36B23A805BA0F85A93
5013C3A3832B7B3C2DA2C8D461670843A93518C960EA266B6E492EDCA33FF81A
248F14512E62BA43755E8CD09108F8786ABC344199D325D2B7AC1806CF34F2DB
B4D05409628DCA8CC5CE9955BF398B60E2038815517EFBC166E9384CF3AF8881
D6B51CE690A894493D242797C01F89E4FAB50A449DE0428C526F12D95CD6036A
D26B95B89FA90B170B3D94A092B6215132F4693EDEFAB7F34E33B96C7B5E14BA
58CCC365FA2517348B3B449708FE689A9E967FCEE9D888EBDFEFC92E8159A339
3CFA03DACFF8A3978BBBD798D58173D63AF34D3727F14A18BB1315BCC99464BD
51AD2D536FA4C540D309B9A7957568FEE207710E2878DE3A96544B8888336C02
18B010A7153E1DC94C75F54E4DF1B22888CFE640385A0FD1E181816068E9BAA3
DF453A02639F9A22D02BDCEAFD7267A65DF2F42FB961D727E29C0593FE137A7F
E2D39A6D782F44E989B4F55A4DB72DFDF7EE92C1B4297131F2DFDFDA9B8B7D90
A5553D1344AEFDADF5A23475F096ABFED8D0E61421F2F08625E4FEBF688D2BEC
6D689220918685BEAC2C5E6F5278AE8BD384F5C21F8D395DD3FDCC8D9B84F136
EB8E250768F6323B70AA537B902E336BEB74E9555EBD37CE4E498AFDFEE9099A
13BD912D96832A759F5417DE38A4A9699E394235B6EE84964B376FD9007CF6C1
D6CDE71FAA658FE7D2A5DE058E5ED095F6AA40090596C0738F22621BE93AF33E
6868139BEDF5519CD075C7E49286865F1EA3BA8A894DFE67E88AAB691498D3DE
225621231C1D4E419C47F4E0FA55B14A8710AD8BC154702D07F21F959249BB50
74D1F986301CB0D093150EEE1816234DAB3AEC57B257CEC2E5B5CEF490F6363D
807E0AC48A7FEE8AF111A57DE4103BB1F7603388575F433770B10705848659BF
CF15B5164443EC15BF46A6A6B310572AF7CEDF366CB7AB79ACF14A65C9792DB8
5F563DFC16BB5C8E3AF15AB74523AAF52D7B233163AD0DAC0EEAEB24B1CE1E87
CAB61ABFE69C30475929EA41C985A5470B7E47BB535DC512A364765F6E4A607E
7658801AF8723B5AEFB95CE9546F7D6875ACAC49EE6A1AA934EAA04B4E9B2A1C
6DF0C99369AF1D23CD9DBF70EFE49E7C7027A616D005C957F4777C61DFCE3C65
9E9EF6937C166EAA2E2526F0802E463655C1C930CEC44D85A034686D684733E8
ED32C2874743D5278E587724E666BFBA295CE39E4844CE240333455504B3CC39
DA6270DF3A43CF86DCC07B563EF591A0E214FC0184922AF0276B3939DC248357
84E041D64C8275957E56B81B278FA7A78C8A2E32F7DF2E316555BCCBABB52501
30C5939F7A6B9EBE9E6D781EEF0AE1AEDF516C08C9BB02A2F810DB452920111C
E6245FD4543202396FEA1F5B8E71E19AC452B62414669E3D2A2762EEC646DE64
3925E9192A5B95F4A8E7CBD979F94C7E50DEAC84CD8666A85B74FCC3A5A4293E
654E566716BAA2FF0230E19284A8E46B5D84D62A
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.0: CMR10 003.002
%%Title: CMR10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR10 known{/CMR10 findfont dup/UniqueID known{dup
/UniqueID get 5000793 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR10 def
/FontBBox {-40 -250 1009 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR10.) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 11 /ff put
dup 12 /fi put
dup 13 /fl put
dup 39 /quoteright put
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 49 /one put
dup 50 /two put
dup 65 /A put
dup 67 /C put
dup 68 /D put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 87 /W put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9B8591E5F01442D8
569672CF86B91C3F79C5DDC97C190EE0082814A5B5A2A5E77C790F087E729079
24A5AC880DDED58334DD5E8DC6A0B2BD4F04B17334A74BF8FF5D88B7B678A04A
2255C050CB39A389106B0C672A1912AFA86A49EFD02E61E6509E50EE35E67944
8FC63D91C3D2794B49A0C2993832BC4CDC8F7BD7575AD61BCDF42E2E421AA93E
3FF9E4FAD980256D8B377043A07FC75D6169338028692CCA8CD1FE92FD60AD26
D57B7519B80A8F8DCE9CEE5CDF720AF268D3C14099498A843D76E3B6C0328F24
D36EFE7F5C4E5B5C612786200C8DE3A41EE5F1FFAF4097653CFCDC8F4FD32E0B
03EDB3E413283B9EFB0AC33B055617005BC9B0057FD68C52D1B0E67F0C571685
767F2AA85ADE4E0104A1C777733D5E318A22A9944336E5B98D965E50D31F357A
8B6EA5A0EA98E1B027CE68C2EDB149EDDD04ED74A1B3D206D471A0C11C11449B
DE190BBFEBC08C9E1B7513B43DA3134D6B11A2516E6E86B67F68C970A320D05E
94FEC57FB347606DF89989C33482BD09D011C55AA920319E7B26A205D3D0F004
22466F09C0482A164CFB27EF6ED2B040ECCC3DCAF345B5A73676F193D43123B7
72FD6CFC5E37930E61EBD5A6307E4DE70194E6384EC0D79DB6AD86D3B319A31C
8B0589D0FE28241D8ACE280D0530EE99C80723E560BB72AE9D53F4713181F491
344B06D3027BA4E9E94D4305BE1D817197C54C8FF56CD6964165F6448ECC8A8A
64B48B4F0FD69299A137589E2491A283509B21A3A5772F75B7602A9F60AE559B
07A58436D04222C73EAEA72DE9A5A441F88D27C11F4F91255EFE280E91A4ACAC
1E98A4E5E6C57B9AE86FD218C3CD8F24A4104156A80F13821384E529783C52C8
78B94AB3A0096090867ED32E8A30980E737922037F75F062BD83BF4F5929BC51
CC22AEE2DBBAAA001CFFBFF41D258424FAD888FFF1BEAB796A44E3126159E120
7E4025C676CF94888A1971AEF8B6764B3AF4A92D36FAF6FC56FD049710EE3782
BC2CD84FE2473F133BE03C1346B875463F126DCAB15C7A9BCC9A727D23611462
4E8D2BFD2466600285D79518712B8681ABCD69608E6AA9578F7BD771EC36E01A
5A17BC17E375020ECA59B43790ABEB9DF5F4FBBEF807E5699EFEAC563E1ACC5D
EFA336E75DE6D8248E9381BB110884FDC89C2F9A41EBBC9A8A1F98E6A41F68BE
EE30E25CA148C1EFF42DFF8C214A6537AB11F260B8C329A4947B5FC8DC9C5622
4DF7BF4FBFB00380D47BABB03BC30627AA74103E553F55278F538EDD8C1E64CE
0F1398CA0AB5A86630139B4A7E8FC02804CAFF3830114640AE50D2FDA3B561B5
C63AD7EE3347804CBB40FB1E77A6C89735DD870351C3A1811591AB493251B904
314F65791963C0412377C1D02362C5E9655F1C3D4803CD379A8EF24C48218C2E
DF1165840462BF37DDE1B8D5FF09FA2C3B261E2F1A65ECFBE5D4EAD43B52C029
EEB3948CB8A252CBAF545C8FA1C31E920E23A12DD7222CEF2D2A513BD758EA13
DA33BF5FBF1D734653EB83DA2D374A5B9A0CE316F24EE375D6DF6BDA49954C2E
DB25A88821193636119D469BA66E5DAA9C92520FD4F84426A4E54273FA469084
7517817A6EE3E21176D333825E88046F50B3CF6938AF9BA79A2F51398239EB91
1A2D07F7FCD948427FF62F40FF95E39FE1A1AA8451411563FD5388472251C155
69BDE9283B41900B21EB1190D06E6B13B7794FED020D2C1BDD205AE77B084BCE
EF628249398B496DE85B406FC2E1939EF00DFC84C07E26CF72EC401BAAE756E5
7F6673216E7560D1C2A723CB405EE5CA474A07F61B81F8836482F73DC9516D67
CE0CB770EAD755B6B356198B4B97EBB29C63456953270CCC8D5650C1D006E69D
38DE2DFEAB27DAD50A817F0D645D30AF5B75A7B53CBD3D2B8D87BD0A7E525AF3
22F7ADDFCE31716914C2318260C2E2B4664893921B68C5A93334A361D94A759C
0D7B146D6FD94F0442D672BDA0F6432E18F3C5DFA37ADA378D95B75F413C9ED1
BB5C606A3EC7DFB3F796F59B0478C13FD1900381EFE0BB5242D5B5D34D03AF1D
4BDC93EAF8020E26CA23C8B0E7DDEBBC6762A557067A4CE05A524188A8F02E2F
3625DA38DFCF381727887F5646A3995A8A38A5FB1E5D5EBB395FDD0B7C8E71AD
B48EEDB62AB2CE99D121435EFBBFCEEA69AE9ED8238B60CC7288DE33C766CDFE
15B767B4AE2E6CE0965E77272AC9F86023DA620548CFAC85BC751C44218A29C9
849F1C2DCBDFAD895B54E51A569952ED50F82DC8A19F367E7E44643854EFD6B3
FCAEB04E55E4661C82D31E2932611748480EF61FB2FBFB0CFB940BEA81AFCD84
4C6A6332D7A600170E38A8EAFCD4F93DC153C43175434C86BC747348FAC61B76
1FEC9027C1A193E55C80F1F20B5317AA0A05AAA36AE235F6E49F06E570FEE798
84857D7552EA92EF3EFAD52DE39C2F8F43C59E3A957B7B926FC95FC4B60186DF
7F3523EE2AB74E294C8C4BCD8B4975E84849E0FBDA6C0B0F24A636DFA578B122
CF97BC5089E21E9F5298D1C9F30CB8BAFF6A3A11BB4D9A0A5CF2B18D055C44CA
4FD4D8FE1AF3630907DE7E585AA811F9CD11FB2C8FC791851D651009FA5DF20B
3C33FD2FF848A9E3F5652BD294965A332DD3F246C91B0ADA34017FF2451D1394
F9C3C95AAC6EC8062BE98E8914D51DA6A164AD13938693D446044859D03A949D
F9AC5DF4A000CDA98BB516D762CB9F6D44B5268FD0C26E88BC4A760C0F75A140
DEBDECA4F511128B7D2805872160C55236F0A0FA7637FF0D4E94AC079CD3C8A7
D03A5A56F26B0438B577C46011A10532FEBCAD14FBD6032E224F45691A726886
56F305231EB2FCDF59C8BBFCB5DBD2D093A0E84D62AC93A2312CA69295E937C4
8DBA1802B85F54B5E7E6D6216A918F911FF705D3B5CF055F1D873B96283A0B53
59344D910CD396D883F6F7836BA65FAB4393A773A8F6BC298069E5BA38210EED
49C9D920F718E3FCE692527DC7CCE6963BF744F2C91BC5952564196D60574E86
87A0FAB21F2DB2BD5A51D7FBD8FC19946D24E5A228462C4772F978E650ADCE3B
8D66B9C21279C531CA1C3A8ECE3420BB65837287A7222CC3673A2A5F8BBFDB60
C719CD073EF9A23675198462C7C87B24CC92D6AEE5C25AC63855CC3281494342
D28F3D2FDE0C183486769A4FD5B0143193D31FCB2C2A14E487BBD96D0BADBB64
D1B56021C363A795BF10E2DB448261C363A54A4AC1182B470C457AA82DF3F5D1
F4B329806141EBD53CAE309319B94133D7EBDC2D0453A905ADD207364371E178
0A95C2686E3B34C4A978BFC0EE968C39ABA00889BC5149162C2B54483D44FD3B
5CFF41F611C7E03B94945F414560E874D7CF27FFD0630890D7D7EA66CBD15448
229059E1C436BB33D69552B5367AB5D53591C4678D0C704DD3EA23F5D9E8A7AC
17D003C19E333E726FFFA2961F33C70F429085F7BFE3E2510F59B78F58B19CB4
01B48E184BAD9020FECCE3AF52048A056981DAEA02AE78197E65855DDB170616
F54278395D9EA50DC83761AE759F9CDEF9E1948E7002414FC05286ED793E6662
3347F2A9AF8917493D7305B92CF93E8E9185F70015F5594084298A6C2F9FD3C0
689F262AC9FEDC9B89577ECDE92F08D3142209FBCE7B5C0A840CC767BCA56C20
4E4E545E2BE4D21C53855CEE4CD0AB35D1A604C0FFFF77DBAE4289752276559F
A05FEE65F45ECAF44E95E23FAB6052195C7948AF0B1126482D4E02D72BF8AB03
DE0F1A632F7672AD9DDE70EDC82AA993678A82BEAD0BC2649C4707FD8509810D
364B5C6FE0E10772E95288C622C2F06C634F4DF8C7FD1432BC9310D5F24FEE3F
7AB324863D6DABAA1576E70643CA79EF4D7DF4105093D66CEE0F3B87D2164A7F
26EA05F5C4645B22D3E1BFD2219657712C168FD90DE801FB0F32759E80DEC1E1
43CEEB19FED12D757205043FC98FEC62D6A8D8B97BC083B4A0E985AF7850D6FD
8716B9957C1C35A0675BC53DF672C425C79F43FDABAEE7D63F092CF271C9A9D7
C41F40C4189510987887942E60A412B3EEC84C9A6E1AC7D54D528F5604B72C08
94B7882621A5BF1F325B92FF96B80878CC550D1AE4D8196E41CB1251856609A5
C4D3BD05A922D0D45E039D9450DEF8490A3E924E41434194910BF60BA1B08BE1
B41824345627745541A4F1703E956328F6227D11C74946B38CFB096139979E56
4E723B889B44C6D78673868C89912F8B4F0B4B485F1587A637B630F92E6072D5
7F3B44EA6FD96BBD4FC28A6C1D90805E3BE3E42A7BC9C880762966C55BC04E01
204D083AE976FAE6F37C94F27E68F8C0F28D52B17F6C0FD7C9150701FD78F8CE
B8E8DC9260E3974005EB5CA728171F482D765016C94D4ADFE4A42EF42212BC56
7E4EEEE8B0D2A7856CD4E44F55C0BAB762F92CB8D64C17022D4BF3A47C12F5E6
279FC23101FEE93753653CE8CEDC3B75C9CCB29BF1D4554C6120DE8EE750FCBB
E38B5D915206974962E320362E59B3F21B3AB1875703191043D03284D4467346
CFF2F98CEB4845B73ED8E003E0DC94251B73E13A9B51A3F1430BCF6A21EB9B7A
65E17FA411F53BE6432F1506232B8159E008FA257F884A4A01AC53BE91754D78
BF14A5B0FBFB9C31BF4908355F8A762052968DF526D118708CCB0B7CB5BEE285
6DAB6CD2E3934178E60BECB11AAB5478623CF6C50C92F8BB5D1A583609028FA7
B8A53B791BDC9EF76A124F3F7641857E4BEA0837CB36176EC9A522EA7F41B8D3
63C37D1145367BD300F17B54522A834BBB74DE12BF9EB26ACE6F24A046D58F89
4D4B7DF74875F1A0C1C9D97BE0849593D7B398EB4B00BEBC8C8D1497B6EF831A
A35380FFB7F1AFA4D888AA52C9482E8B1755CC209905F98F40D95B44D4DCBCB6
67423D1BC2F3560FF0A8B4F0CAC352A4EE2C1D946E45AAEC8A6AD40303F3382C
DF0756BFA3B1ED64C169E56ED1C760F2FF0E24DC5C9F41306EF8D2628153D30A
5DCB0791126BEFD4947D7EF08301FE015F2B0008DFFCBF9F2D4D859FD43EC7D9
C5BE237E9BF6665B7B1BEBB362F0C0C3A8D86010B9C97FA741C97C2E0513386C
9C26C235B14DD2A58BFDAC7B5F63DB4DA6D5D37D0098175A9071590E1DF66A3D
B8173A047C29D7D35557F06132CC920B5460B8AFC11D23D09A4E45D089F5EB51
963FA1A6256E359D485107FD143B2BF21FDE9DA5744BC2615E86C31C89470CF0
D06C6397D9FCCB316EA9989430240759D2C4945D941F159FC02327F34B042BAB
B5C3A47C78E8C1A6FBCD396B1A51CC4B020B8AD401841EDABACECDB482D6EC5B
72D2BFEB4556720FADD49D07307C8B22ACB7E310CA4151A85C71EEF70E8D15DE
B3B00F26E0E166C14647A65ADA228A3D1C89025BE059306565DB1B1EFC37D358
8C1EB024254AFD049BA977BD4C2C605050E17940A89D0D4C5D963E792320F5DB
3706682E03D25D9E02487247819551465092CC22B6B56E93F3AB528038FEC3F0
668F866707A19B0463BE706EC729D2EE1653AAC7E29BD25BFB3241D4792F5152
ED415B4E7FA92C2EE5A22E27E8B75542C492E56D811C192E95542A6FE0BFE5A5
69273C2ABED4300D491B92D2AECDD278404CB84B1BB1BD7AFEC858215837D118
C0E928BE7E07CFEEB51A6D21375B772B8248C994564014015232A0DA4BEA1754
3274F407FED0837A236371F1A32056240F2015B1E7F4B2CA72C6B58610A66F13
407CFFBA5E0A2893C1F572D50F51286E9133B5A84239C9493B0574E77D281D01
11D00683354A000C9700EAFBC1FD104EA19DFCB87470190E7E2CE26E3A6FD0FF
2620B87B82AC8686B6206B530F17E9348BC7D04B948348802CE53A312443DB87
4DBBA5313A6A2A8DAB8A1CC9A594FF8C299281C0A261C8CB2226B732FBEEDE40
2C6ACC74A1A61379E2E1CD5548CD908268A32FA83D8504C442EA0E183ADBF7FF
9FD09C037AB03516ECCA93FF048235BD11A25DB07F164512A079C5392AC7F889
CE96AE5C8D9580BCAFCC087C35E76EED1A671E87C12E3045E15A687134736DF8
DA984772AFD189D68571A2ED7256F1E204230E41D3D9DD876F938951714A3973
0CA9310489F8E807C1C7A4E51AEA5BC030610A5D7263FF7E0F9FDE3E5E37A362
5B919000BD94D978583B942EB79CF2BEAC33FEBC9A67272EB10865BA8FB75FD7
9D280AB59F91B96C16C982DE848D76D8FA8620DFD7C80B7DEAE7264350D6FB3A
EF04794DA3305844A7CF718F6D1A4A3AFF6826173A076A1372ABFC54ED3AC6C2
09C9287FC830556CA694E21CA5342ECA7B10C90AFC4783D841D7B1E34FA3DB7A
2B706F3E21B0FBAB23E7257962FC3BC309CEA2C7239A9D6B44CC96825115ABD2
AF9A2566D2F3382C01569FBDB94C8D664A5DA0F7DC3DD140CA77C743D7BC1420
324ECF9E4780280EB119885E96A6C619CE3C0C8E1E264E2DEB137E5DC8149786
486D65667ECF47B1A1E20E9E6E4FC8323E0BC8E61BDD3BCDFC6575C69C03E31A
EFFC290472CBBD049DE3F840AEE37A2486034240F80E75D8A79E0762377DF660
52B12EAA16D678990B11A9BFBC03C1D4FCDA9FD4FFBB3E88352438102F10B7C5
9F04C013B6575B5E948FAB58EA691984A0E54E6B9F3F505FFFEF74D06FA1CDF3
4B8A95904C8A2763AA8AF5B71D00F5DE09DC1CDF87A08B6D181453063E14C12D
B7BB3775A6E2A901636273D9EEB833EA8CF20FD83AE899E28DADE10EEEC20BD7
BD93085A4B1AC80AC1AE8280C14767F1A487BD066007A0D050317BD081131A14
6EA0898ED59E46DA7B6254BDCCBC660686E2EDA0E77A705A653733BB5C5497D0
B130359F866CF293FB6EF0C2AC5BAA2DB0DED045E2DED3A2612D078333260359
16CF0CCB272D34767EA069E0F0B0D42327A18529D72E890EDA6195C2688438ED
E9ACDBEED41E81CA8EB5E43C2B09CE266EFCA03F2D7FF57F12B06F9E54FCC6A6
546676F6FFC5B8B7D3F0982B6FF0D21D949309F0C0B175CC1D0976F8C55C6AED
6E821C39041E22D91AB30922F2B2EC2746BC7DAB484991542FBC82D87B487507
559AB466F73EE23C2D3194DC5CE4C9AE66D3164613AC5CBB3DB501B64DA7C91B
C7ED2EE9027FC0906820B35D4F2CF66C4F9CE4A884B7C07155BCA884ECA5EB3A
ABB83F84DB1F5639599DC7D3F51241AB5D95C3BCB7AB1EC90B4BC989F74FB354
04B2D7366A34D335A47B8C00C05CB423482BF6C7970A95545424A08AFF9A035B
7F83F52B65A9799CE76E303B85664B624C65E9CA58184C7BE2BB9D9C86A4DE5A
8165EE3DA2E652B5022EE7893896BABD88931DE1D538F615787645DF5ACBBA0B
A8E5B899A37321AA7D4B283AC9234978C2DD81813A1EE5DB6EC170DAC1B6EF02
94892635B498765C07A38D2E9DB0B7581B11056C28278F89B0E60998379C07EB
C0EAEDC32AA69B8B836F92A61AFD35688315B2C3F860632FC13E4BDFB63214BC
41CC6859EAB3AC3034449213CAB99FA1D216563419CD6D6CE4E1B56F33E6C654
7AA9DCB5B05FC068DF02AC32408C8010AD004F6CCA9887830927F8CBCD49CDB5
18CAC1EAFF815FF2F6F527F936948201565003022C6C7390B4E3C2B219FB4F76
9F12BD25CA7B3B61D1A2F8DFEE795D04D5428B42FB66E0C254AF7B7A10CEF7FD
E5ADA5E217BE24851180E9A1700FBA66C7D2B0D7BFDE4F4EED1D24B821A40947
5620363657F6D048E651A689822CF815E72FC8AE9D835BE31D1DD8B54C9A717F
4DC319B4B59AE073936EA40B070524C7E71D5A7B64436DA107749746B516E29F
E3BBCB8F8C473E706670E11E5B221716F315FF097CD1841D0069FA69EA1898FF
9F9EC2518C77806A19730C97F54BEAD604548D553D4A6EDB247853225E24E7E9
89D71F6BC94DB986467E755CCC99069B313F5745B02B4BB608A39F0A0A732B87
7EA2DED68219754BF1FBCA350327572D769C962EF9242132D93A5C8E9725D8D3
AAAEC15ED0F362471AA58488620156F3474FA59CA080EA96FE995D2B3DEEADF3
3141D157481C66507725ACA5953CBBE1ACEE7E3F02C72C6552D15EB3D612730E
61A06A43575568DC3CF3844BABF04CA767E299575EF2ECAAC7649193843D694E
6CA59318C01132C361A3E43BE637B70B9966664E12EF4707F6B100BC37778D1C
F1806B1DE081D2C9B995BF1EE3842EFFBB8416161FE31633A6EDA118E563BDC1
C42F403BE8A009FC756406669E34C6A08668808E0C31A589D0720BE32F3181F9
8039645643E15D25917F38DFFD8BD08A420854DE15AF291ED675A634C151193D
29AA6E04E84A598350AF17E71973854842AFEC3EB1B58E4D4433309BF5ED9D86
32C4BD136C89169D45718A88BABE25072D8E552AA4CA3F840ECB11519B06EB44
13026DD6800CBAA90F3BF0022E66A54BE1059BD5D224B674AD319FF9987350C3
D9BCA7F584B4D9E304CF614565FBC76518B70B7A86FFA7A4E0AB3F6104C8F05A
2A12D463FDB1CE3CF726D64933BE3E7B9289E87FBBEFB6FEBA1EAE1D738C9D02
AA08AB09078B55DE2A262944551CC1BA7C3BA71DA7AF6F3FF85D2CE6329165A3
7B2A341167A07B6BA482AA6199B185491196BBDE507FFB9C97E5D683FC1DCADA
8C9F60827E89F02AB5E218F72101344849F8075AB02AED3FCC2FFC3515225457
3E0F83566D9C912ACDB47A6C659D9A8024608504C70F3F1F295ABE8388451FBC
75C49BE7F2AB7363B15C69C51C30FFEDCECDFAA8283B5F0C69751EAE6BFFD914
C68D9DB374FD89AE583C5305D7D01D417F28A12064034A7290750EBC897F1198
7CE12AC26DACA211A3421924EBA01BF0C7F3722A2E41B4F601223113ED93775B
FEF4540A9941FF240FC0DBD2A65ECF31F868C5092BE089745D082DFBA7395913
C4322FF067E51859F4A455482B979DBDE13544B856AD10C2359EA996076E3AD1
F6363E18CEF8715CB464AA160036097C59932B16A2115827314A2CEB34D5947C
9F8051B2D0CB4106B105B825722A1A0FBA8E217CDBFAD61F6DD71F93F498F4E7
20FC9819E6C6AE3A34049A9E4BEC29A28E43DDFECF131E27A82FC1B8BBE36315
E5C3DE9963587B7457D56024D95645ADE0D95DEA7488F9ECB3DD471E898B9240
AB3BC8F14FBB57279B0CEB464AA9D083F8A63723F7E5F750F0DA9C6BACA4A3E9
85515086F457B5AEBA634AE5C75971733044D64738F2CE357640B13B0C575326
48A5E341E6E376A63E8C361376C47B399F2136B6E9A563BB6CF6EE049BC37E72
16341DA64093C33CE11E30603EAD00851CC85FB4AC5E98C99D2E5C078B5199A8
AA5AC678091C4C8B2E0C7F572991AA890A8B6CB720A8FF751E0626BAED7A00AC
A04113EDB9EC511D2259F5BB8486F4E5C9F8BD084BB78E1410C3EA86261A7E9E
44B34379ED073DE8582E22D2211452E7D556AC5D2E5BC2C7A40254A3FC8ED7DA
3A6C181536F7E1FE87685F5C2F25A54FE58765E9B4177CDB2E8D3A4D68C53636
9F37F4E9D16B6960D398E8FBE9109C41FA192B690A9445963F34134453BD97E8
E9F50A01BB82CB08C12BA0871E122D483AE830BE0C13E597487AA4432468CF99
4F92CBD51443ED5564F723DCE1FA97D2920568999A59AD14685C049D0ADFE3AD
593BA529898CF32BAF2418E0DF03305390971EB483A408513E198EB4110AACF3
9BDD650E2AC26FD439BDC345F65EF7A361467D0F4BDD30A5BE2933A36B3E1A9F
1FE991399C9B315162B3638D26C1816D094387C5BB61C6C9FD252974848A4BAA
98663DA46206E7D91C2174D6A4451AD39D5F33CDD10C0CCF63AAE519616F25D1
E9A61F6F3A2C060587C679F0FEE3118DF9BFDD66C3C92E4ED37083AF78CDEC59
A4699BD7E7503C513BB19334A90124A148153ECD7E725386EE45ACE597058C23
D84C0FB8BAE6E8B396D944701B889D88EC0C67BA35C6FAFBFD165CDAF956401A
69536F16148149854F30BC2A56598B6401D1C30E918A709D3FC28E9F61332BE4
26868CFCC802951323D77ABD3D5E3F317220FAC52877C43A39C380747458AF3E
0CB8FFCCAE2A3DA4ED3579B13E4648240E135064785DB25707745A85A32A5FED
EEB88EB660EED67ADB18B205D95E498FA4F44A0E1AA633B04A47FE961EED2A60
C64C7192FBBEC581D0057A8BAA2CE25DD99ECCEB9A37844C7C6D9D8569475835
D322DD7FB5C5BC6F1F1A7EDAB3A2D46017152D4BCD6256A353CA470F0D1B278B
4D30DECADC1EE98763AA30EF505F246F215870E1F4F7E4F2FF47B7F1AE39F349
62F2CFC1B3EE29DA78461BB8B0E404526E58AC7236A130C5BA2E61C1B78DB1E5
9DEA446C0C37160DF700A127EE4B29E5DA8177D46D775C81FB9F1B3523CFC02D
D5862D4F84ECF95BB20D704D39FB1477DD4F7BD28872ECAD4D82A933A8A304C3
4454187F5974B1DF0E82C88AD21B2C61F632C4EE3D46550616CB9D209BBC1FDD
B8DCDDCE90B26CDA26462258D5DFBFD7DA78F1440CCCEBBC0D5E68C3D2A722DF
6E4C1490CBF14C54000BC2B7B3C9F518D6F96BB74F5E3F01C40DA45E5EE2A11E
55F0A46D6D413F27FAF1B8E3636E1DEA92D8958C5FBBFC6151D81BE2244C9A68
19E1697149D7BACECFB473D36A702A60A5CAA990AB6F84ABF8848A3AB53CCAE1
1AB6EC8060C4CB183768DCA854670B5EFBDE62C0D323AE8DF6E3E3B6FEB34778
60F131C2A0EFD97EE57F50C5A776D1186AC09ADF8063C7B8054478C4A6954A9D
D1A8C070E10439A2EF166228948D362EA3C387A605ECFD4FEB93F67D42A0426F
FFE86C585853987DA8D57BAC31F44F820C183AF42FE7C1B93BF1A2C1CFF7C586
19910DB288BA3D575E788EB3FCE7723B7BE900D8FC766AE90FC2980E9E7CDEE8
508FE0DDE6957743A50A06486E400363FB537DB05A8B9DC812EB3CF8D686F810
ECC5CB32EE2CCCEBCF8C130564BF28BEAA131A95ECFE48911B4F847F80431E90
7980E5F31868C9B7911ACF6A363B4B14136E381F2ECFB466CB9A310B1E33D5B6
A76428F2487667E0523BD56EBDCE4CC50668C92FB0729C26A662413175C2DD11
F7C39B765BB9C26575630214BBD0B68584D8761E8D01FB1F62CD6C9CA9EF819D
583310F7F36C594CFE3EDD4392B60F9EB03E959625BD6AC69BF3BCED0463B234
40457B88631A307D5C7F15C7EE363C4A2456D8E212A9276190ECF64A57226A06
011DFD404505EEAA7189D3E1C9F18C2F186B5D77B4E31498CAC8B84018E1D701
0DA1D86D2903F1C9A4643146254B1B627B7A8FAEC8FDDA6015FA9A23B8BB4A46
413D9F0815AFDA216C9AA658788C2E481263AA4E6E7386A786E482EC5AD74027
A820699996D6947840CC912C7AAAA1311ECD6D67F5B86FD1EFFCD299F74EFCF2
FD1BC84BBD6C18B3A497CA632CE69411A1D6431701B4FCB144CC2DF0F451210E
0C4BEEFA8FD4D44418E94D30B73FC9FB78351E804B638EF8D7160B648C9A024F
71F2C6B6E847062270DE2167A4F30F2E068EA70ED2D54770CA02D03D9A172492
705C5C1AEE56772FFB7615A3D0A8895F4D300356C7D6AB6BE4CC7AD3F3C1B600
AD4A1347B9630EC981EAE762E2E5F3F0D685F3C0C5A89CB88706982B668733AD
F6E38626350B4F76BB023652642EAB6FFE9C2919E4A0D405B49F7CF1BC4BABE5
DA495EF9EF7BC53AA53AC4E26EB342BFC34ED8D81DD9CD787ADBCCB50425B236
A68C248FC14854FD237F822044315A33E621A75DFC568409A1F4F936EE7A1FDF
E7AE75FBCB68DFC9085985880E6AE8A4F4C6646D51F1EFC027BCD0C318681400
2E18CAA2F95C442A5A12F527AB38E104C5C83FB37589449EF35A4408044FF599
F0C4E34068475EF1CE3C449419621E779EA7407168318F9EAB885067BDA9C5CD
F83C2931E8E25EFD77E172E7B5D7F8566F3E33E5D99CC20318E0D0D969377930
64915C0E007E94441FFCC23CA46985A9338E5C78AEA4FF9F8E85695D4399A1B6
DB6C010030D085D5DCFBAB19928700934A2B8EAEF00D3EE8E2B6F822F645FFD4
E865E66362B6E766D14D4EF3DB6C8AB12DE2D36023919F35497FEA5CBC3E019F
4749DD7F4C2FC1B6269C25478E0A63F78F3460EDD4F64B4D2A5B3E66004CCA18
9338E62266525677BFA0884300F7B0D2F91D289F88D13A6778CE56AAB193199A
FA455C17BCA32CD9E00DC6C1DF4B83A1EB775861A86FFA6C013D2CE1AB4F2A96
A946DF63A8927E241E699056ACD227EB7BFF141899F2B3681C0559BE166AFFED
A9E96B3481DC0625ED21E916569754EBAE33E519C3715CFF2ACB07271A374CFF
D453817EFA61369D50682A921BA05407CC92C0EDE3E969EC9A32AFC9496735A9
5824BB8B8DD910D7770583AE67B91876C1DB3A6B32B70C9CC4B27DA28E97CCA8
A8808DE5147D14854F4BC16A4CA2BEF39BD8D58CE2A97980BC90C31BC0A38617
C3611867D55CBFE884E01E76900462E9B98203D685C3373BB0B5A7848B34D8DA
BF35B0FB50EB98863B01FF95558B0B4C2C3D640582C97265DEE992AEC4FFD081
15C704C45215E1A3DE6F509CD1687F9C1E29C7D42C743AB4914B4FCDB86657CB
A51B95B3F27ED3073D18583174E2E5292B4AC111717BFEF4323EB01D08D6AD36
C8CEF4CA1680A44B386B6867C76EFBAD0032F797074467546169178813E594F8
E4D817340D4E7867E456689DF6A8A882303C69BD8AB44DDBBB9868062DB37BC1
5E442098CDC86D60B3F578F4A8B1AA20DF091CC8C263AFB456638E893A6CDC52
33F5981F527943D8B977A581EB2ED13B74D20108B84A128D27ADF9E35D9791F4
4A53FD863BB61F22A4A322F1662A2793386B44E81D826FE5E70A529834DCE42E
D259AD0011301C07BBC01D14248AEEF49C513E4EB3A9DC9B644AD0B2971ABA3E
D7080E73DC979388B35AE1762213F08E7FCED4C7F75F6DA42159C6450498DFE1
8809DCE64F786D0DB94C79E32BE7137230304FA9E901306AC2521F9AB5BBFA9D
DA88C24E359367A972ED78412C27FD2E617F794258F37E18316F792605B67415
D1A3D2CFF210A77A5444C7800837AFA287BC70C71A3237E754AEB05FB139D388
908E45EE43C529AE9A1BB1D98E83CEE5CA77E1149C5588B76334F0242CB426CC
F6C7E892E2690F2FC4AA982B84A2E172676250F6F241CE3C925596747065A5D6
782A022793E0DAD8F349E643B7C1C94EE3ED55FD066B16D1D835789C4BD426D1
1D22418E64895D3129BFC345C76B26AB84966D286B245139500CD00B5BC15B16
CE36CD92C1A33686000A0D693F3EBFC193FCAF521DBCC7015432AA56FF2690C3
AAD62AB25EF7F4BA2FDB82227F7ABFDED110C71DC2522959813A4EB5688FF611
446E668A0D14428A8F49CBEB93E8E43BF46E66547678C7A76CB2C28E2B9909F0
915F2929C5D1811B35E66B10B146D05503EEAFD516BDDA514C94A4F58759FA1C
8F3B83EC8BCDC05D6E56ABBE055C07C11B05E238070C89CDC07460FAC41F556B
EAC023F32EF307ED2810A52B12E76181C93F448E8B6EAD7A2472A7AC001E42BC
8A9357BA248A55A5ABBE01D1447F67463C395DCB5178B4329964180E3B9E9853
8DD79536E162D3386EB880296959F4965DDFEE07856A921B95003114D82EC626
C936209A4405EEB14A6980D8C1A0CC22D938093264DB0040FD8F514ABFB45A3C
FE5DD9686F37D351D4A88908E1007F970B2F100174A5A604C9801896AA0CE3AF
2870672252F50004AABA32CFED02B18A62C82829532365DD344A14E87EE41925
E73CDA82E17D7F2F50E3A0C5194B7BE208658E3D91ECEE5651BD26CDD282640E
273BED91E962F8F1407D5635FCE66821BAA639CF2CD5D840BD4723DF84A41000
D1280DF7F8982136D215BD19ED26ED912BD5CFB5A81473DB49296BEEFC86DA02
9836845E24C5670A8B65520C6C77DBCD6AE778DA7E6DD959128AAD0721F35E68
7EA39A237BE928A8DB5A62F34C7F62FD208A15181A049D4BEA23670D867FBE16
37F8BE95A206FFF23C308A4658C538C09DF9D1AA00298E3294907BF997692129
6EF3F61843769AC6A03EB017D5A1EE5F6AC25C830BF97639AEA8DEF98F9CF3DE
2BE6C3968DEF5D8FBBF6F862FDE6A13E0E2DEC9E765F687DBF812C8079A54B2F
28FD2F93950BDEA4A938ACE131424839BA479AD55D7DE245FCA0EB5BA0431C91
8A8705C91B83F1337FE554A28F0DE1204B6A0BED4E0429488FAE43D3E1659306
6727FC403D2F151439B2CE1CB73BE5ED623E74959469EA020BB972347ECE6362
D70421FA9D500DD4E731C73A266B31652ADF6AEE34D7C30EDEA04BE9F5D28CF3
8D9BD5C764C6F2723FA89BD79F1A167BE7D4E9EA7674875B17B16B50311A941C
8906A02C0399F180C7CB6FAF04B996E67D2E733ACEE269C0AB2889E016133CDE
BF36C075F41C7E18C584E6782210E7602E585C3C0C60CA01D9C4073FF040A400
671C132046F0F5C851E32A64A5D48C8A3F63ED30CC522E4561473A55F0F6C4E5
92DAC594093AD137CEB4F816A56AB457F94C7584FAE0C72CE2765D32CD344416
EA0CC1F73DA25DEE138AAA65D2A2DFA21E41DA05929D67A80F57DB456DD99BCE
1A37935FD2D625E4BC6FEB2FB0770B7C8ADBABA17DD4534A41536ABE1877D441
C5F23D4B5A60938365DC9C9826555D8A7BB3C239B5D1D0322B08C6B0CF7792D1
108EC7447C5C2743DD710E076EE82952964C95BC1B4CD2C42040E6071971229F
3FA34E2E9F346789C2856FB70BA78086CD9D4DFCC558D7CDEEE60DB3699DD7B5
0A71CBEC4C2F1E0CFFDDEB6CAC40BF28D03FCCE6029FAF2EA2E0AACFB84A512F
0EC2647B9FB5D3B14ADFB1F2828CEAFFC0D68A4C1928227CC72029008CC3F4BA
2C7635811C441CDCF0E53A65D51FCFC77562B2D0BF1CB86F72F4B8CF00837846
2A141430FE5AC817BD70B44E16A863C8E3A44D58BB11350C7D68AA9FC5FB16F1
58B93DE7D948B3F43BC159360437F5391B4214563A89AA2D11DEAAFFA287E7B4
C1574C4260765F6E2FB041EF3C39D3FA9907B883B75E103119BBF1FA6DE53C35
675222A5AE6F78DE69902141CFF8197D138C07F7555AA43DACD1AEB481D839E6
820904B1E281D6627D22F146041F9282C6315BBC15F4A0042BB0B2C8740FCBC4
6D45192A6353219911AD3A0C955CA3EBB93E760E34078FEF27092AFB45F9F072
E778546E37FD69981864D864CF4FAA6CEC05706447819FAE88A118307DE9D7F4
2E6D1FDA4AA5D218E9B2F882277C939C3CAF74ECEE8BC174E14B35B76A8C9F48
8E630AEA7CB9EADE340EA5E02B2B085C9FE9BD9E93EDDE6767BD0ADE02772694
11B9C0EECE25E668EC5652A42CD883C6AE331AF992594AFAC8C756D5439053B0
542F0D5B75FC985E5AF62AB7BC7DB9E846D1328507BD64C6115CA8574EF02E55
926840840C356B3153324A971EF712B4C9D7D6774D952AA0A8493DFABD7D8EB4
30E2638536B47DCF441B20984EB611053CA24B5213C664A3F229F4C0A93BBB8B
8DCBFC7C9231523403FA392F20A57AE7ADE2961E4B39CEF45419E6A78E8892BD
1419A2F6FCFCD69FD5CBD3A65FC72005D8D47CDB8232130DD3AA5443BB8C6964
03E03C02848A646D0C29AB2850A292FEF431EB6316C4535A42636F534F2BBE68
4051ED5EFF55E91B9C5F4C7AFEAA2B91D7EEE8B4B149FF199398E30A3F6573E2
1D880A551FE11DD96934FEAB19D8621E14E1A47223598E8AF10703CB394B6D2C
029727B79015C13640B938D8B0B7017509156F1AEF2982B749010DF9E14F0AA8
89D2E24CDFD0F0F26FC1322D119B6795312D35AEF1D0B7A4DD5C4C3906742DE6
E6EE80E51EFAD3B5F13CE472F73A2989CA467CC04D9B93B866EDFF2FE8A2830E
E4E12E10A6A29762129E487AE9C962FE03C34FB3D10364D8D09C6F50F02F8E96
39BD19360FD833CEF622BA101D12F50B2B6793AFB7A496E3900D48B78BDEB5A6
9DAF74BFAC29F6E37DF8A2C5A712529F5BFCED8017EACED6F38177777E02F03C
F0E2D57113935E20D0BBF27BAC3CDE1E9F13ED7D73BF7FA808020CEF62102F6E
397B43DD4DBFE3A4339755753CAA35F49570800CD8668D9A380981C3B8CDCFE9
2F0697FF39B4EEE28BECA0D4DA1CB0DA73A444F12B7CB452F52F953406919C94
B1FF381E2959E448D86789FA0A8A50968959311BD92F8F8541157CD4FC37180E
8E8B1C70BF8DEF1658E3A1C3DFCD0835581AEF97B91D213CDC568C3484AC8373
6746DD1A0503802C3AEEDCC0803C62590D7EE9B295A111AA825D3144F03E9A6D
094EA4155EB64F340417BA5F9C08CBB5AEAE618C038975D6ABCF02963107A3A2
8A71A6EDB8600B3912C713A08080397EBFD7921E4259212FD7DFC74C487EF989
DC36E59C51C644A10ABB7CBC3AFB22464ED3D3F8982E502AD2A3232C16A8DBD3
D954EF0630238A49D71A0DD184B3E561CA7604052BBAB669B3D802B21099C5FC
56AC27E739463A97366E83227F7FC94E8F5A33529F4E4AAE5314A6B06DD74C5E
0E54ED579AFFCC820A0F8F460042EE94C5C2FD647EFEB3F77AE494A75511809A
AA9022D42DCD639794831795DE92434934A111C9BB59A995D07826FDDC86CDE3
E8D705C63C41954E33F35E2194F785A9B20DB6239159EBBD1392EEE6F44C4B10
50B08A9C60946A82906136E48DAFD3C01B913E81197C4E5A18CB6C09D556C1D1
698966D48875DDA51BB6CFDEC15E6FF89CB6247EEF2168EAE1F4F963F96589EC
8CB0FFAC1E0FA6B7BBB138D3E71357053B9F523BFD4A18483EB1C2BCC86B85A2
AD11E4AC4A93F12FC08148EF269BE708A1C1D6E8CAF3A9204B1B68AFF9307D09
1F54054CD428E172668685860758661BD362CB043700373B6623303E6162E31B
9BA0786FF27B0F3CDC212B72C2416F2C69B6C621D544FBE44BF38B27623C7712
FBACDC701C78C2259D889915C01E64E040166ED8C4B2CF113ED3130BC05254B2
5051EB83A9483867A5E3CB8A315838BCABD9657F831D880F7F22C5CA085DCE6E
8C4AC0E7326C949AB6D55D84EDA71742F5E7917B8B7CCC5476AE712BD2BDAB37
DA734F855AACABEED9CDEB3B3BEDD537528E0BCE33E51236F6980EFD7FDC82C4
DB2CCCCA1C022FD0667FEB92253AF4C76A760727783EBC486813743CE403BE2D
B3B3E93201EBAEA88F2052C876862D8362D82476771E81C0A7B3BC107584C8C2
6443E2EBEDCA746E83D8F2F96EE7F7AAF9E4DA431EEF8828DCC219F5060493DA
457C31FD855E9F45A1789D9063763FBFC06939F946D70657E92E71E2A27C8CBF
E9724115AA56AE725E5AEE4ADF18905B442498EF0BD263256253AB9D0B9E8EE3
5B77E01D4A1C7DA6E7AE6AC0F2B3AA9C8828C06C64CEBAD4CFD2BF3EECA38A53
375732B2685067B909E5B0E4992FE41965819636683431C0ABC765BA80CF8093
480172A8EC9B596876068952A18A3B1C1CB819603DFE0C243455E22B21A0C238
AB9693BC5D3DD7DB0EE3405226D615F1CCB56C59217EC4BD0374109566F38C62
36573B9033573ABC58EC78D98B14042618AEB8A7BAD8D1EE10D97F6B9638D25F
C6D26EEF2DD3432FB0788D5366EA42CB35BE9DF51AD913303A1F264785C0889A
5E6A773D0F0D5D0B66F36DBCA46E2AD50BDA467579F6207CD66A6598FD8B539B
DCA08FAC97985A157F2D88EC66D3919117A715BC448F4F5ACD9E7442B7EB7478
E9DE1DF6A25351F1BB8719CC1FE6248A9EFFC0BCB282AAFD90EF282ED7A1A981
34CAAF9FF22B2FC7778CCF32D78CEE45441C0F8C3439D69EB6531F54B2872586
2694276830A074B499560920AE6BB1FC0213E70BF363650E306FFD4BCA89189F
9705CB9D0B13E23EA29316BA7E7F5473A7EC3741B96C22F59EABB7F5F206EF9E
62137DB4773CD850EF882F3A92F28CFA97EDA4E58E2A18B77BA8F82FA4F87EFF
ECC17ED5E472FE46FA5E589A445749C6454DB7307E2A78F95673E9CF78A5AF24
FCA2E5B934BD8FBF04874D48127FFA92FBCBC8A9273FB3E7409E80C605F0EEC6
806DED266BF05D98DBC5362F4557295E7CA305600B2487E2B266AD008F480844
2CEF15ABDFE4C1EE361E7B673D9485FE425C5B65876B115B151C8FF79CF6B783
022828B7952306C9DF95ED100B25CFA235A4029D52D9D792AEEDD69B381A97F0
421149A1682DDCA0B63763BFBF09DD761815864413B479824DC5E92BA4864600
E84CE4149674E656B1CD8585039861529DCEFD691E481F251587995837AA852E
28B8BD4ED77A7AFD825CAC94C5A64C3D7C94AAD10B884AEAACEBDE3D65EAEB85
DF48EF480055070B1A99C32FE1BED2099B09AB0511B1B6F52506531B7C008120
37414C27FFBD53B511A2A482E6F0852BFF42D5B8B9D1982660B4BB74B7D664C8
0D022478B27AC5DDDCFFF6770E26498AE3E42089A47E5DA3FA739883843D09F6
79383973BA5EB911CD2BCBC996EAED697437E97371DFC7C0525E57BBAD89BB49
82ED3CE99EEF8AE608D0AC6AB487C7E466C30E7F959E8464AE7C324F53811894
A2CA56D5D790054A1B2BED399E78AABC8FB696C34E6D0842DC68BF031B335264
298940D8A45016BF1EFD113A6B49026530D31063734911C8BB9D31B38B9BDEE7
58903FCB4299251F8AE195BCD2DD2C9935FB32BA716B7F49766515B38538496E
30C609B2C984079E7419A9858F778BDBADDDEDA87E9B4B499A997D3BABB47AF8
6058652C8E0FD5032186E06F23028E3BC09376A52D880DB7C07A745DD9F95BEA
BCDEFBA74AF8D489F3D5F5C1B7D478E24D2486A78682441D9CD748C4565DA61C
5432D0355B6B1F5761D9730479F5483C78F47DB5FD0FAB1ECBD3E746759CD775
94B357F410121179FFFF5ADCC023CD36FACF047BDCF21C5E0B5B3A23CC74B4D6
23AA1FF6F20C63D0C7762DFCFE39F3A140580C3EAB4F92A7098B0F93ACD732F9
B00E7ED05D7300FF117A1D6E9D15DD5F874D3B6A21F36D98E06D7D693DC3AE73
B91362064776ED5BAAD13DDFD9963F3026B90555539A92FCA6EAAF4C09135BBA
CBC8EA025ED5B1FE04C210AC63726368995A45EEB6C92DA6A179811BC75467DF
C79E4D3247EF0BE284AD4911B0EB735B3856609FEEB78EDF53B7CE802D0AC3C2
7A179C3625878D9183361306FFB49385D801028D43C0A76F33BE08D517645E79
57C2178BF512BB76A352AA7A7136C02DF4385FC8758104815A31957C481D5803
12D42894C52A6452F0E889BCB0744CC744BE5B4EFDFCE1A1A0637FD965DAD60F
B1496268F1C1E4A84C33F24AC6668B24C566824C8AE99CCFB0065E38BE71BCB7
E628F9202E9B494FBF918922EC1710DB98F7957F5BF39B79B515DD959A7D81C2
39FAED3A5254395BD824015812DA9725FA11270E4E4B8E017170C009C9715211
0562AB3C9FAFB4FE06F303C991586B11BD2D203BCCFA53E4CDC01C916F14DCA2
3CC9484BD2AAF1F5489DC03DB9EB871BE757D0F27D74104DD840BEA13507C0CC
59E461D36963986233A208C6A25778B38E64331C24DA38896CBAFFB905CD4321
9750EDD07BFFBC7800871A1029506C54DC83CDC219B54F677FE4E284C9A08083
013F7B11B213895CE86B8C4F4EC03BC1DEE3513ECE657D6EC60042BC4A3134E0
F05CDF7075920C46200AD477C70DAE4A7E2DCC04395A6BEC2821C31B9F3262AF
A8823854D0B55BF111D52A6F0D71A84EFF0CE3C45AEDD4006AA55BCE6DB5B1C4
400FA50EDDB8CB1A62D473EE5ABBC2CF380C6C2ADF87B75E8CDE74E37C3C0A89
D0D6090699DD8686904AE0DBCE6366F6F9283211910C3244CC131DC528701761
A8C1E405E771197183340F4BB14C4C45313788A8DC2D2E91BB11382F94D28991
B6E6AFEB481FA8376772B7B71109BE0DE747454BD02502FB60F19992B84B70FE
66C4028B43F9CBDCE909714751FE75CB3AE344D97B304D642A4867305E047460
4DFFE6528B82912339FBC2E92D03FAFFFF874994DEC2C5B844F158C9D964E90D
D0C34D6F029EA805A487AFA0343BB88A9425EA9C627486E09FD6713E2786468D
837402C08E6C41CCD1F040188AC5125A2A53AB3B7F65F00B212E186112C097F4
E83D30744A6A09EBF6820E811C7DF30C6062EAA3913B76B6A694EF384CB8B969
331C135B6EEB85DF9EEF3DC91E5E50CE59BFA8F4F70099DEB3E30201782807D9
128909307639BDECFB4092230D605B9AB272BF07C94A791D4B12FF95E2296EA7
99A0892B813F32407CA7192B98D41538EB1D2EE01E9A8EB22FB738CE0A937D3D
6F087C30FF0E8C2BDA6A868834D986BC43841D0F125317E8857BBC9B3FDD7309
904DB0229E49B5D231FE5E8166D9077309E057BF5586CF122ED2940484535B98
0E888CAFF7EA6430DFF07619C2C5A364B42DD9B3E644BEE84FABA2887DFC0AC8
14E514D8F58552D06928CBEA3F1CF6FB8028ADBB54554C412E87AE05B50736C8
C0F94B78E451B3F5B9C2C0D2F9287E13B9B21A81491C970702D909D8E5D9AAE7
300D9FE4719A8EEB323C2C06D9E2CAF3A193420AE810037433854F3C71C05D5E
9FA762A47D72FFC2CF48DBD9F528F280405F96413EFABC5170099BE133191AD5
1D0089ECB383A9293AF35827651E43363027A1F20E84B10B555807887EF56218
2DAB027BFDE0A841536407808E5E643283C7F14BDAB4E8426F3A6A453F167132
575F4EDF7664B3195354203B9A723F82032D185FBB233F619E4BF4BAAAE268A1
293BD95440CFBA707A11C09C965A1059C0BC62AC66D3797D5B1C37A0CA4227B2
831B9EA0FA0A398CEB8620DE94F3D96F286F32C82830A82C188C7415D1B64EB3
74E1BBD25B0670B8584BC465C7CB10B13F3E076A6D70E469C8821A064DAE2482
44E63C036E62BE141E80DD9BC832DB3D53FC8A0A900A44A1CA4D72A771F32B24
65FAB17D350D73613610A4EA061D07BC887A7EF14F4E2BCE892F512360A9540D
3CE4D82B1C9A8F4E6918B9FA425A8896D9604D0FE877F510F67F3136191347F6
92C43E944C7713B0EA216269B4BDBD4093AC58FE854527A04E8F6175EF49957A
B743931DA2DE113418CD92A7A2402DB51945E13F575C214A8B75D99FFD17A6F1
506CE045A04CAF491C29407ECC5C743C2459B2C16B4146D09B623B6D78D6DFF1
58985F85301F5406DD8001A361A64E0C33DDA20D5E8735D3FD7CE3475C2D795A
C73C06D63F24BB2FDDF2FC0EFA5EB121F63BE18FFEFC1CD9811AE672CD07A59C
A446E11C580D897EE7F15E935A614069343EBD08C4B9C55D0434E0322E82C73C
F8DBF3AC223F42F849F896F80F24BEF869348E7B33071561FEF6E88BBC89A3B9
D589560961A9EE0776B1A98FC2D028FAE2CCC90C8D8676E6739EB412B9957374
2CF8883BF3E58A3D5CBC8D11354E1EDF88FA9735C944C0E7AD100F7B4255010F
6097EC1DE2010BF24CF1FD12363594E31CCB4AB37B2493DA279AF9CA8F1F0E43
56F0EB19B634D69B85678D7B3F7B30B1A15B7B3C7AEB89537042905FEC0092A2
BB4D5E646ED9C39CC3C56AE0F1822FBEC3909914C48AEBDED677D56D7229B519
2D5151C54AB3A4D8A06E021DCE3D46FBD9C91D96DA07FE72433C190BE11B2DC6
3205CBFF2AEDA20DB4BB29AC140C29C5E888263B0DE77E16464A3351127A2CC0
56DAA1285ED53F22CE96E34F9A1C847507703303D041D2D569D3AEB41B2F18C5
B0B0D54BDD83767B2DC5F0F9490A73D3CB845EBF23630E1553F1BBD57B3A2E2D
101D665F31D4B4E737BE724420B4AE7F12A03F4DA81F086E40383C3252BE186E
4DF419FC6393EAE0E90E7FF71BADB350987CC5EF08A4B45AB05BBBBA84B2C7D6
AE75D64EE65E4308BF3E89C0871FA7656A36231B2ECFEA805540409AC828880D
7472743C4F8A2EDAE93234CEC5750E192EE8A907A9F1ED82AA65717767978467
19AF8675218D053F1DFCB92C5106F2B66F6373C65CCDB5FB0D414321D9116393
DA4ECAEF823B277BAD8E68213DFC1AB598F6B7A31AE86834357D1283220BB149
269886C47B5B0A949D830D6A4AC2A30796DD81353F8F631EB6E974730C416BFF
69733169FABBAA35E20F8CF99A53FE1EAF0EFCA5EB164E83F5ED37B7E61EB759
4E582E005F837306011D1564A502F956F976FA0EFECF5C5840CC7173A1D26808
6EB54105A026AAF91DEBD8D7BB4559AA51806C04F52723B72EBF378E955F7808
B1FC2F63D968ED439348E66B2E07C5DAA4934A98FF90CEF45BCF3310AB941681
9C1D0DF5D90F7454EE5488C27A1BBF1AEDB7CF436E9F12CEA613DD715677965D
A018B269EB7BD119E6BDFB53FFF074E9E487EEB5D07E5AA8AA8F3EAF3F2B478D
6963022787FA44B8BFBA0BB4FEE30C0AFF50A91F948DBF61AE4CA32E601B41F9
6BEEF35E360569E66BFE8FE798E9B1F471F666B9A972A66C7CE0C6A33D9DD3A8
963396F533089B6177E34C5434E93E3A947E35BBAF784B76D7FCC64D7CF772A9
3BBE897DB9512EDEA55D57EB7EE5EE15CC852FB794291420690F83528CB552EE
CA06FE4713A71D97A3564607CFC822426692E89293D6D31812D3896657FAD0B4
EA08AEE0F3414F62E1B8FA761CFC6E5B69F1EEAA659B70E8EFF0F0E2FDC5774D
F3C36C6E6FC79512C3D674834358B26A721B1C1CDE44457DA5085562E801FAC3
248F0379642CEBA426EE4DDAF90E095855EE3B0D8492E12FBA13B057A04C9A48
4DA5C2BDF3C9614387A07D192B221B53921D13F752D8713C7FC7EA54C0C8DAB4
F125301EF77DB2520C419E6F7D30F4AF99A3C60FE85B32A22988540F54F99F5E
56ED67D3A692E18A53EDC233816DA6FF86DCCFDA5134F96BFBB1D39E885B56EF
312096DBD548032777F5A5EAE6735DE2C4F51ED75E69C480A53C4C51F4FED909
90B768B70A105E125787D9C98655EC6A4960B333FD7ECB667B0B601BBFDB31F8
D2AC46FFBBD32052CAD20F36B32AEF6F42509B10AFFCF32BA72C119E3CDA9385
75798A95F84A7A6284A659AB73ADDBED88D1424A5CCE622946E0B343255A4CF2
3A82DA0D89554B6601994F20A870006DC7ACAFD0C3D20DC4209AD0563D625EFD
47BD4F03C4B30C6DF635FFFAD038BAF42E05A0D31973DD9C03E4A43C5B76DD0B
C50855CC47AD48691C2A47DF05506DD3D2FD1D0662D3FD07A24AD8D0C40F0D74
77C98E9C0A0F9C1C5D376AE077208469C6AEF34B6676F5B547C98BF3BB27B719
AC4683AA1F3DD0E2C78D72537084AD309119A6DEE65BF93CADBD5F13B1D0E56F
3263FB534AA7FCD26018C67E7E4B51539F56DE8F65BA31E804F5A664B427EEC9
FE79221D1C0453F9F6F0DB600DAA56538A2FF8FBEBA8A38E6B0B381077E0146D
E5D1896E3E5846A5481C1AF3D91270BADF371D3B7E999C1166890D93EAC0048C
4CD00C6E8EA259CAC7574907854625B42E658B2BFF35FF22B08509E8C9B68FDB
B6ECC3650125D86ED32986BFB2A899F60C10CBC6D1486D0FC6F3E0751BC39E46
DE0F8E1943513D8AB0DEAE0D264864FA14F2502B7E2DCAB1010087EF63FA98BA
73DF6C4365FEAACFEEF1DDC79F2FAD52FB7AACBFDE6B391B0BE2D6F2AAB56B59
907F4475FA2FEDC71082CFA4A234CFC146FDBBCA5F91B5E8E9F4758CAF32EFFB
9E4BA3F162894FB6C77D04D581FBD60E7B7D0061C7116A3ED777C52A6173AD4E
1E65F97BD1564FCB770D4DE186B517499665CDAE7897DB5A4326501262058310
E8657B91F0A8FB5BD021F39137DB397F0D9F6F4224EBD5B0712E3DAC4F3380EC
6D0C44967F01E83D9F5AC29C4EB534BDCD37024C93BC23F31C539E83E3A7517C
35822D4979FB22CBC0B61AB26E4AC262CBCD1B18B63D1C8F6DD0730BAE80BADC
C527ADB4D52CC0C0D78321D8F9F86D303A957218FC8918C7937F8538038B8C55
A6A30868F8C5B2B85302FD23CA6D82A8A53868D8C870EED063709CF9DE68CB6F
5E6F32843C976A449A0FD3C81CCAE539630DE467625659D454DB0E97445DEA93
43D88443AF3458521BD3752E1F79A147610F16AABF84E805BF4AEC7BF4FE755C
E28EE4ABC81450B5FAE8DF00D47546106F524737B934EE334AE166A5A2D79870
9BFC2837A067813E4FCC43E2698E0D79929C4649CD160F73790F5755D9AC7CB7
2BA42AA1CEB93C9C06E4100DD75D9B462D1B6CDA8174C38D935894792CCD10C0
23BDC155B25777D208F733C3C2792A42338D1C6459E552EA727FBA5152E21BB7
0848165A7EDE3A23D3CCA61B4D50F01001656DA00262671DF30D178C390D6CDA
205D56B4AA39D51C0F1508864C165FA3F9C10F4F1C2DA10C844C811BE999F392
6A337FF48092CF09752E04FB9E84632CFD2260627ADCA25AE26AAEAB9FD29DF1
513D0918A0F34F9DC89C728D1C9E4FDB8058FAB2574C5360AE88CDFD6C3320CC
B7FEDDE2B7649F7343EA72146B7C144625AE11D11E1440D8E10B36122D80FB7E
01E63E4E2EA176ECB5373E356E6012C5565C6A73D11B5786756F043F42A95317
BBF024E8ACE914FC7F0F174957F7B4A71AFF068CDC841C02172D6099DD24829C
BCE194A45FAA22271F71381E2B3ECE428AACD1BCF5032C96D9D4D7CA411E5E75
60C8EC11AB6600F7F6EDF0C2D87A8A8A6B1D3F00880A4832988438B13F405956
7E69AE9C32313F80723FD34035E03E2B68869B43565BD23E8E84D78EA3D88B2C
344AFA56E383BF656976E597BA34DA9E8939BDDC32DBF5C8BC234EAFFBC7F31F
6B2081D602E950534D07A1C793793A314097D343352A229CB0D388140E14E1D2
63A4F29C5CD36B06F1EE6D29232C496D289D906F5E5BE038F6E4E7944BFA4F4F
4E40C07076AD66D05BC630EFF806B0122BEE74B2AF8675DA7E4DFB81CC9D4AFA
F84ABFAC21E18EE6B32137057E87A3D3E8CDAC1C12A40A49F6930B1844CE21FF
A96E471255F03CCC0130EDD2873049D8721408460261FE0C8D317991F057EDC2
C080C3607939315AD7BD3471CB4D0F656B1D46A8B1FCB31DA18D6E1B3ACD9972
C01136360AAD38E1DC0936CA33CC21EB2BDE8A4B6F9DCD67898CE913242E3B84
A9B4DA5B2AA66240FEFF46B9F1E3A0FB5D0D4D3397F419F722DEA2E6F3A29508
5D132B506324BE757D55EA2F55A8D25598DD934DC9DCED3386293C6E22F5C05D
FD115A8B71F721B5A7D4367E153AB9D30B86692D7768DE99603F34D947132BBC
4CF84B4644AC1CF57C92A7C070B70B90522F074D5A1327383A074F9C53E306E4
10D1F04DD0F2A178C396AF9479FD63CE41067BE7ED39B56D8EA44052F3929221
17D60B9F2C661F5B3BE90F87A84A887716FB7B023562BBB92729950D9A0769C9
602D401676B5896F1FA7FF56D3DC15A2CA2BBE0A833A71270D7A0CC094777A89
DBB15B88C7484F931436366014761C2AAA28AD1683E5A8172B6BF43C3D0F37B3
4C6F2DC9BCE98C7906D0E643BF8034ED5BBF5E89993E81FA15031A7ADB523F82
554728D4A8C558A79FA735A38C78228157471CD70837AF2AD78470A89863CB5A
9C04049CC12185909A6428FF1FE9347B45E2CF893369D510654C0925E68F45A1
868E5E07BF7D7F92E4A27E38468F4E1699F5598DA9BCBAA694854B36B75A39F5
8B1D92D79889C00DBE9B4ADF218695611473128AAB31F029340D739218A4D53B
0F6225659823FDC8561C0CD75DAF3232A3BFBE9CC0B771E5F4CAC9829A7D3AAC
F78DBD45653F0FBE39FDFFE7003B2695DF4525429FD6E733231A8CBA842CF9ED
9C9A1ED9645E7CD61FE32FAA1DDAA48E8FC0194CE3B4716027B40820DDD2E102
F9D4C71DB5875EB0A15A5F99D6DB98AA1BB26B93BC107C3BDC27553F73EEF373
F9A810E9A6C1F5229277286AC07E547DFB4E5B6E5760AB9F29124CB73D624C36
0DD236BFBDD3CFF6378A9A496E4D48C0CFF2796AB36E6124ADDB663B4B90F08D
9FA8CD99050043DF891B1065386E6EB6190E9CD0F664D861988B1C55F1DD7E98
6600D2CF71390043370A74F95B8A6CC4DFAB7E9C65BDF1230B5753275560797B
6CBAF876547ACD34B98B4748AD1FAEF445B2C0
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMTI12
%!PS-AdobeFont-1.0: CMTI12 003.002
%%Title: CMTI12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMTI12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMTI12 known{/CMTI12 findfont dup/UniqueID known{dup
/UniqueID get 5000829 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMTI12 def
/FontBBox {-36 -251 1103 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMTI12.) readonly def
/FullName (CMTI12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 68 /D put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 75 /K put
dup 76 /L put
dup 82 /R put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 117 /u put
dup 119 /w put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE32340DC6F28AF40857E4451976E7
5182433CF9F333A38BD841C0D4E68BF9E012EB32A8FFB76B5816306B5EDF7C99
8B3A16D9B4BC056662E32C7CD0123DFAEB734C7532E64BBFBF5A60336E646716
EFB852C877F440D329172C71F1E5D59CE9473C26B8AEF7AD68EF0727B6EC2E0C
02CE8D8B07183838330C0284BD419CBDAE42B141D3D4BE492473F240CEED931D
46E9F999C5CB3235E2C6DAAA2C0169E1991BEAEA0D704BF49CEA3E98E8C2361A
4B60D020D325E4C2450F3BCF59223103D20DB6943DE1B57C5E0311AE44B83C3E
4FBCDB0B74ABB18FDD877252FD3501E05E597A77D142BED9940318B98D508672
4ECF79C43A857674E4DCF2556325CA8CC1C432E54543F706987376A084BF512F
0E4C517917FB1D607C83E479DD094240C3F309A57561CDF8496722F1D3EBF6FA
45CD3D7D810E2C07D39BFE08C0A25FD568DD37C2D182E5D30A7B2855BAD24559
D455B29B1F723BE1C4F827D72B1156DC2C1EEA76C9B27733FBB23ED36F61919B
4A6E8253C8C05F3D4BDC64B99B8494F7C37E9C19DB6A9CA8E9B0F9E7E3346EE0
EF416016CEE932E53A26599DD8CD09D77DF591A9D532AAD3E321CDCB28636809
E61D9EC969F2E27190A475407B90211902429778103D18665A681B0DD51F6E92
58D1288E2AB3FAEF05854938FEFFD3B4F376AAD303ECD28B23649E5D4C3CB85A
5C9CDCD1853BBF3282BCB5CF57720C6CF7AE468048D7AE5BCD2F15DEC1B33B5F
9917BF69BB64261CF101BB47A09E47D6508250374D00ACEC3E3FE8C5330AD9DB
9D9F60CC170F2FD6DEA12DA24CEA846E25ED6683A213E4FFD0BA239894C920B0
EFF562ED994A7A46F8EE2AF98F88317E513A06AB82A629979AAD3ACE316E7074
01EAD920A9E1D54E8FBD623773429C58A2964B498990E8420E5F7A45B3D4342C
1AC109FA67D4BF33C9D1E0E2973BB8B2495DDF5A7F8E306A0C712BD7A7FC98C7
44B26D102D3CD44A320FE89CBA6B3AB39627DA4679A5BB7C27276B34ED66260F
DEB659189A797BC41D05323454CA4600A6D840CA3C1DC31BB7FEE8DE367B8177
3F1546C9EA98FA9F7CD61F177CEC2950526D54A6E7A0038F2B20609E7BE31EFB
51FDB6829852937071FEAAA3A0E51E625D7FBF2F7C224467C7DB77F7AFE006A5
418CF691841AB7A9923506845BFE066769A01A51EA48840E898FC6FF0ED9C2A6
1DB61E8840029ED92A129D38CAFAD4084B17679A84A262D2F9376363D4B5E46B
1C94302E5CD24CBE93A27319A8F79138414B2E94CE6F78C6F06B544D5862C2C6
297EFE524BBEF0CC2C32F63CDCE433E19B52BF0C2C7064E3ACD429E2466BB85A
ED82C6EDC8AF5D75855B43A61504128F75C2DAF7F5C4405BE36C136CB809DF31
A40E0DEE80C10F6E6442CDCEDEF8DD0C01FB2C035A1D136693D366552862A421
81A290080EB8A3C5160FC2CD760A69F8254E8B0EC8E7280EC33802EC2668C149
73CADCFBD4E56A1E7A9CDA3F6A50E00AA536B02B4BBF4CE60B7A791098C3E434
B5A7F17D6E461FEE23C6C8C148C54D14345DECB7A619E56268131F65F86C51B0
E45860D46A1A798134AB3283BC8B73D9B39EC5D0C1241A85AA46B02E51DE6433
60BEAC76351AB35D8DBFD60C6F12F8B32E08C671E0269174E1E142E687B1C558
5668FDA480255261DC29288FF5ED56B50DD8512BD4948F31F14C71CB4F8FEFEC
DD8E4F4EBE9C28312640334BE454634EF26B5FD02A93210D487AA4F3AF284479
303995AD31F4A6DD2C2DCDED3380D50EA1D8743A3C6561CBF4DE91634374DE87
FED0CF17C73B49060648AC6AF2921D19FFE1B7C7E76AA84600078A0160160D5B
BFAA2007AE70640698BBBFEBFA5C11F351610023F563840413AF6934156D93B6
551069D681492EE73D480D648503801A921E37868B4ABBB013B628772DAC3683
3E44C318352E7700094ED0FF624AE560D2A783343B266FB925AE0D990B65F8E4
7A9725F23F0A08EFA08F81616A5D51E5EC31CD1BA229A89AB63ED782A6D716C7
1F00BA66A3158CDEAE3399653D7A29193760AD92F65C066A4DF35F91BDE771B1
74E17E4879428B5692343AA963A349064693B52F14B09C5F4B329C4AF4078998
D3F6C1046538F989C8AE84AE032A112C3E657907EE7A844B14C6A0FA8C9A1CD9
797E195186C478057525CBCCAA0FFB09F67F97E69BC402F6199B6900D9F285E6
47D359B1728728770C95B1A85E22D2132FDE7075F8FA1123F62504E53AB106D7
99B33689D55D0BC0C552745C5129CEF9F874850240FA6BF5F4779E35BF15A8F9
F425ED40480C60FE3ED85173E620320A462092834C0BCF6EFF9F1D5912CEB941
9C18D8EED5CA36CF2C7D3965BB0929EDBF7FC997A9CFE79A9FA9C54A11E1F421
7F3FA4ABB80A3C60E9165DBFB0EA765BD21846FD1260F1AA4644CBE05CEC736E
638311023F9F51F4C0166733A32BC1F615C8D9256E44BE8C2FFEC45B7B612FCB
21C52DB57E87EC8E166498AA8A4528B7C612E3BB8117D6BAF5CA8F9D038C1430
B7EA8699F31ACDC03774AEDDF6B73233944A1A89ECBAED2EFBD30DDF42821846
AF828EC54BEA6E7312B3255A7F55783C5D4AF1D9780A9670C9C7E02A50535A13
6D957F895D53E4E18A4B4263695DF2BD9626E717D5C3B80E908E59EF5D093798
7215550A5613AB86D67C1F89C95FBB0E6ACCAAB397479D483AEE4607E111EF34
2FD92DC7F991B6AE84BC7CB982D819A17022ECFEFFB981A6F678655A6278825F
0EFB5733C5F46529EF1FBB01C6BA7413BA9211251C0A70A470F735A96F6E0D45
DB1342D6B97ABC234790D346C74927F5C910F71918D615CA907984F0229E3F54
4F5F75AFF784C7A470DDCFFC308ADF6EF43979DD3B54C6A8DF3B53DB783B81E3
9C57413C3A317419C190F207720743084DC20288C1AD08B8B0FD4ED805FBA8B5
BB874DCE4AE93AE3B8A117612787DA6C8C7512191BC36F6D8AA38F39099474AE
CD570CB5570BBA932C9C7A63DD386CABF1956FF87C266BF145ED5D27547234BD
943841047FE9A41C24B82FD3D3EA49A56C56840B1B359FB2A3F28E10AB09AECA
2FE2520DEE9B5542591E72ACE610DA4BF31C6E204574DC78033008F019519B2F
E45C99F1B938D212602E824CA1CA020211420C77FF545DF586702451B0923EDA
CA15BFF98CF2F0A56404591E57F7C89CAC6D22E0FEF9094770CF003801E5CC08
110B272A50805F89C0BB5C2966B9385C26F4A5008AAD97A29408A5116BE613CD
5ED9F85D2BCDE96FCF3121D5EE1D455A4CB03BF2AC33493FEEBEB955EF737F7A
EABF96C137DD84B3EA39C61CE95B5967405CEF17D9CF1BDD1199346F95E77CB8
5FA2D38D858DAEF10D0DD660211C8C4C69EF58B60DEDE48DF76300EAB8F0A547
6DBC87BEE8DD4EDFE3020BA56F362503AFA62D8C13BB270C3884560E227AFABB
5D810B2B092531A679485FCFFB88BA8313646B644A35C413053DECCD4B371450
18F54701F610E52E727AE8D25A8093B60093FAF775B6414F66F43F517488B4A4
00AA4F672A34A73531218601904A7F50A045E80CD804D028EAFF506EDA1ED998
ECF16435C6CA8E203F2A813506F4B8CDAC0A3D69F4B704AB80F170EC87B7C732
AEFCBA3BF4050A9CFADB87F7AD4B53BECE197C10A2E84571A640328B90E9A294
73F6CDDE4F4AF9F1F3A257BD130454CF95D390ECA95FC4221D5041E71D65FC21
8323BA5A3335E2E905E33D5BA56BBBC9CC30D25764A066D013B116E693C56762
4F683F112A572C2C04ED041CF7BB4FAB0D899B3F2679B431E8993A650184CB4B
1B391B39929AF803F868245A69C964B560A274B07DFCB88A6508082DD6092E38
80D9187A146B60B225CA22F593AA6B4B7EE1EE41A0D375C4FA69EC6C8E02B54F
B855D385C973A7223DE22465D039D213315C35F0D079E8CD030F62993495B2EB
A0F9BA98565F89D2E09BB60D90B0CFFFF1F0845810ED27CC8F1088F74D48A30D
7FA0728498E78A381B0169B7678520EB5769522BB5838212D32C8C1ED5635753
EAA3C14E6640BC34D43EC162711996E0CABBBDE0932FCB6B2838C22C0E42DCE7
1BC85E372F24C1145655D59CCD50EA6E1A673CB0342BB744A43EA1B9104CF736
324E367D82ED67E01B0608294A91386045C1564E4E417E1A62EFBC148C0B4A56
73A98AE2F2433164740B839F851F9C38124B3C01CD976128DF6A06FEFE14B960
4573E748370D70F9FBFDBF875584852E70264766FA5CE893F74D0D5884889178
078CB149821A743D797E9577A7D27E7ED607349CB2CC6968A7CE402DF9A55069
4A985B517B714C603F993944CC64083DE3D5F969F9C5913C297E8493D310CA42
795C94740A5E5D3415CE7B4A5AA11A940D93992329D8B00213244405BBE73958
37CD65B6AEBCCB2263B937F671FFF3C6314D400983E5AEB6A34709D854FDD0AA
3D27A62BB23E253E6E2CA994294009B857B5F1FFB66E772A0BF9D83F4F72B89F
51B125AC9E495343C9D84A4BB4759DA4D2ADA38A195C7905CE288FD8634ED996
9068F0DC8DD08F3D3A1288A271E7F7EC4AF76EF6A78C47BAD95FA14A3AB690E1
19A13639774593D77FC1610D7F1E25A31AF94C5354B35500B8E57B0F65AC82C2
2A519581B587F5E3C941734A4269842D38F74E89C2AADB8ADB3D16542B0485BF
BD4F1EDB4064E96A330D735F73789614C8D606DC553A0A2409CF4C595AE51505
CF203817971BD7F9B3346C036A18FECA44CE1C2042BA4E7FFA3FFEB6371A06F9
30082F47FE87B207E13A68BCA122968AD74CF6A12EF6767988F0EB0CB64981C9
30D9717F6C7D07F4B37CFDD68EE4480C0CA305AFA4BD21DFE131D6715E839973
E1271BF576F70C2F8C6827B3EF02CCA123EA46A02B2722E06078C3D9B3743CDE
45B43B561743264277D0D1FCACDDA80E5C6185E90F82D1DA4DC076B6BE49D2BE
F03EF513F1861CF66D2B7F8D52C7A5C21DF1276B72CC1CDAAB5A16D20722A95F
8B1EB6E6B605D3878831204A0EFC95CB3C5B588D4F0A540D466D13B8468ECDC1
DB08D36E7FA19709A67A0FA08421053EEC9068ED464D29BB1BEDD0BA88882707
9F41334C3BD3F995321711B6ABDE3C12A8907F930F7AF490D774A05398ED03D6
789D91B4DACEA3D8EE11C2CD850A6EF4128B60EDE9BD37710F43836EF6D53FD2
D8123F81EC6F01A93A8B36FAE49692E7276F7CDCCB09F332ECE359E3E7DB2364
A60B192438FD158B18CB3EB40FD28F74A740367F02D5CB6B53959A0D11BDF388
9AAEE02F0E96AE2F802FF08BF778F26DBBAC8F5AA04CF3AEB180235BFDE493DA
4D0B13E0B61696A8ACE4FF7A09956A1896B2875E5B2BDBA09DA08B9589957E85
51084D76A00FB728E286CCFD2F53088158005599835B18F6F5AAAA6051270AF2
59F7BF641B0AF4E79F4491725189B89E57CD10B442B8EF89345D04EE3E18EC98
217D81FFB1B473B9562605F7B0AC3FA8CFB798A988E5FF20F068A6B2399C71B8
2E3C19E58601B0AD3872170B0AE8FA33F3A50EC5E67EC22C00D3DDDCD7B592E1
0D1CF31DAA48D10F7C6A56CA052A5AE914EE08CEE011FFF20D00B46A7738C434
D70F1040C611168D2C1851DBA89DA526428E6D5DDA244AA267AE3559B0C7DC8F
AAE1687F823CE628AAD59999E74DFFACCF7D3412B466F6C3A315D8AA3350FB18
9EBE417717C42F3201D19E1870A2A3424E96F1A9734F32E85DF220E08C4DDF8A
AE6F3491A3C805578924F36C146CBAF1D38C8C18D18E5A9B38236BD3E6B9E5BA
595F66A2A8DE9F52C9DFE00ABA5B99806A87D2EA39EF2C3A8D94FBFCB0CB5345
9AC36328B89AA13E4BBFAD70314009B0A2588847B7092C9EB938DD069CFA3679
73D9CF01F9756B931B34E70F4A5F1C41FC577515A5CDC49FE2C9A13D62E7E612
2AA5969248241BEAEEA5CAD34154EF5F9153D85ACD6FBD6B7F2834BC65C77E27
5ED803220949B14126BFAAC7728CAE16EF205F408232C5D7B83AFDB9C2191997
38005204EF424640DE1163B577274FB455EC0383BC6CC17F35112AB638743DEF
9954A5B2DF6A50DAA8662967E8E2208A9D1E3506309A9EC4C001CF91896E79A1
F3F6FE998DDF7C7971707CF7DF7415F6D42EE28620C0A225A1B9E389F397F972
552E566F748613EA1FD417CAA7B90A2BEC1AB07F44BB8AB6ED829F2D7F4DD597
989617E6BEF5E701498823382DEFC2D5FD078DF888DDCA99E62890AC0E5BE8BE
0CB662B561A49D2221847151D203457C797A904BCB5A1D68A51EEA20A167047C
36FF0FDD999E46C857864D1CE7568CE9518230418124EE5E51FD96C0FD8EB7BC
2A49F49AD72BB71F849B112147271000A77F41CF476AD687E6BC3DFDDE0CDE1D
ABE816BF31348D25FE0A11FE7F5559BEDFC24A14F91BB73BE7F5FA95DA24D705
3DA96E8D05B84A1E5BFB0F15D7D4638CE4C63B74404128CF56A016180EAA054B
85FEE6937681557D0B5BC3C560947D456F48D7F4CB7A5EED52B103281B152E3F
ADCE8B98497B74B05096AABA261D2A2EF56572904ACE2866C6A081C926BAC3E0
DE02EBB63FA29197B3812809F08A9E3D5ECFFF751E60F7082749F57352040E06
CAF9290336395684E85FA2446FBF1D0223F74B0D3464B06975010B83D0975181
3DB6C0E2967CFBDAFBD555018305184953487AFAE112D36E696DB8A18F3E3A74
C8B123F16D077DBBC85A226A26D406F622858EB7F1646BC0093A7C9711A1DCD2
6302B0611AC20A3870195D8BBA4E8E4F2CC73030B2354308CF8C06D68DD7FA14
87CE9D6FC7A8A356AA2DC356231B4993655A0FF55AF67090E2947C2B7FB9E96C
EAAF52A01ABA6D69B738D6E3D4B2CF1E037D991EB5943BB0E6AB3868138CBF20
A112805F4CC00C65A4BE86D7492C23E34CC0BEEFAA0403E2AC21FD33D7A7FD09
9DCAC0BE550881647B322FE5806735FD993F5ED7C62173AB29095F67A626B9F3
20829E4788786C978B4BC9BAB9B3A750F130F9D4AFDA6EA3A7DF09D7615951D1
0C783A653F0BBFC23902019BA276A6D7944F1A34C1EC7E2710091C0B94CC3938
01C50C5E4A9C19F47D69074023F574D7A7302565EF9920A8E2A5076E6E3DDD2F
409CF1AB8BCE348FE63A136E03A520DDACA32571675AEB94D761B7B625AF1626
8BA9ED761E12A52C511890DAF1F790857C3C9FD3FD033A8330CD8E19266FE888
76AB1F3B3C8BA1FFCF3A6CA570290FC1640B6C4231D8346BD346E647D138B2B7
F7861E2C7C7C4431E3E91E318BA1DF8338AD4EB4AC104EBE7AAD8F5A09E6AB3A
48B9EB51A85277B221E3A22AAF38219B681918DBBB2F77FA8AA27F310159C763
A6E66D93879B592289B919B425FD7A367B7820FF430100E1EAE0877F84326FCF
5F1DD99964BC6BEB63528D2B218CCE41024EA2CE703959071A65EDE99127EFB8
0CC01566E5E52DB32D01512383A7711C7770AE17A71E5D95629642AA79CD5F01
D37FC89696F25C2EE4DD70DBDECEFA4FA2CD5D2F8ACE75937D2B1FEC7A31A893
16D314D800AFD3EA28068983A2ED3A7C75A5570F30A2824A47D6A789AC554C3C
A78C2DE9771B86F73C66EF8E1D0FD046DD4F19A31EEAEE04D5F38B73C623F326
F146C7164C9B18B5EED2113363092ADE0ABF0D7BD4C10BE9766F81C34878B236
1A0FD6D8AB4BC7E3C01F1C880C3A9186E4006210D22EB64CD7690FDA750EAE7E
C87A9D29128D49082578ECC0BC977D91E9CBB1ECC0D3527DC0ACAB39402015F1
B067FC5E7705586D97E81F8911FC2BC8E7C077384AAD4DDDEDBEF65CA4B75F6E
39E41528CF53CADA928537D557B518BB740593A6E4D0100ACBF126FF20888342
A0D3D7C201C4CDE8CBF59A1BA4F924E4EBC3E02883D5FDF2C8249AD8117332E1
BB52D2F621115C0F98037D4962EFAC0FA86B14F3C046A1F7085E40E99C0F2841
8B2C299411F9DC8FA0C8C7E5D7822A10D31D881F6C47B6C47CFA943FF9A9F5E8
D5F1C3E6CCFA324059B942FBA2C6D0E9A3D080DA0CD80D8DF76B0FB6BB706F45
C84054E62F75294ED126A95DBB4FA2D09EF80D1F2C507DF980D3DD2BFA3DBF49
6A99DCC954BE39E51507B12ECDD92C397E82B1E979FBFCE731CDDAE1D9147448
8C312DF818A0E08266A2B60C9C0902AE64276F7A1C6D7BB2EDCCB2E3B7659B13
AEA47A527FB302716624B48AB754218E2E3D99115C606CBC90B5EF73B9F99439
6184472986249C8D8E52A404FE76E17FF814D5BDCA95AC580B44DAE8C593939C
9E7C0ED996B9D2B8118F71BC2F0EBBEA6D7E18FC7CCDC78BF05A034BE39DF9EE
C6BDAE8886C7058B15DABA55E85757137873AE811F25AC7EE3A0CCB8649F6095
7249EDD95E20DF06719DE1E109E5BEFC2A4098E77020110C37A90B5BDBF09654
0F72A7AA528BB009E0FC966D03BF5EC2AB2F109FB09BABE1DE6A9F210B590563
EA94F930201F1676F3D23805CB9620828E3A3B42E9FC4459744013528BFB0E0C
F46A06EA698545C376603E34B998965C47F537F260EB79FA98C230E7ED5D4E50
9039E8A40DA24A30CB183C5CDCF006E69D4F02BE5C215D48178A2457F9D730EE
6938E1BA8AA780B544FD555E35E0E849F7EAB85D41FC56BBAF1D5853A06437EB
67132D3877B5E9635D9C8B937E62FEB6CA192C6358670B2DEB844850C6FD866E
BE3346E4A11DB7767AADFF79080BC9F474F46C7238DBF4A11E5C2E29957788C1
B9F35317001932632EA278303F0E998FC75FAB18CB6029E8C5D6065443101DDF
35E79AA7E593F661A8F2158B8FF6E723A43BCA3F58AF94E17FD3D34C38752E28
D52F3FFDB9B0218E025DC9573041BF08F241EDDD9299CB8E558D35E55A781FB7
1D92B49DD11EE3D1995FCAC2B4BDB277B5FEB8287ED1B457E2B419955279ABA1
EF75DF9B767715DBB713D2A0DF3A2C5056BF5141A032E138011A1D41A2F9C338
3EE4478A5A94378098C553F97504C948A907A692E8DD2415AD39D11E353EE1DA
7F0D36FE90CDFFBFE0AD53B43F04516E826318CA7187DF0085EAF6F73FD533D2
3591CCAD202A0EA332D10EBA8DCCD3BB96A027A9F13C1D130AB7531988FDC5DC
D302AB508D888193B2C089DDDC1095722D3881BC0282AF571BA0F4177CB20C3D
F45BFD0E007FBB11564C2CB985EA57F1BCDA2452B66EF9D91E2B5105A5AAA653
6983F3BE71058B03B0ECABC2277EF65836444E4A14386555CB42F9F34D97D5F6
E1BC62CBBBD83B1C50E4A1DA505300AC612DCE1BF3A3592C5DA26EADDF8A1972
FB85A6022C4823BA13E76C81F2508C364BEDB96CE14979078FB9EC358CD4532E
24E29759560D48940217D86C3BA6363AE605D91213D15BA32AD31C17A8EEA40E
1B8260097C9FE93EB8068C6196F4BDFFFE4D95EC3F716866256C1F5434343399
4C71BD7E2B901EC9198BC03CE04AC9B5FE6F4422D9587ABA5088D04E706519C6
F29AB87274D395DF668631D16C7B85297F59BA25108D5B5361D825B79EC67B15
FFF0086FDA1197C6A613DE50AD0F818BC2F886327DFB9E45B6CD59C027713FA9
2DEA61A960B5B556AD34BA9059A44D4C381B932C4E6A653BBEE85F85199E8642
6E95D20C6500E746AAA9B6209A8EC8EC5206C89BDFBD764ABE6ACAEE48CA6E46
8F3FE89A9052C98909184C024F25CDC8ACA11923A356DB896F37B97436944C52
FB02C6A91A41ACCE2739401F9BC491397ACC4AA5212DDDDE4CFC8DB0E22C07FD
78C0993C1DF24B5623DDE057E9599A17BE8E6F8318ADCB260ADE0E3C3B7E0E9A
4C9E344DFEF12CBF7A272A45509919BF64F05509C00A9A8238EBD8778ECEC099
BA340B0F94B26F2A5210F7DBE71D1ADFB3494F806EABB8C889A65D6DE5C054C3
453F3E7B6FFBD4F567A4734FA3C858043837DE7A008756048BCB640FBAEE904D
E2C455B597FFD53F5A30AF1B2ACAF8F2A17B3C50261C60B7EFE94F450AE34A49
5F135D2E97068F8D76461E83E9223ECB8EFE236E86CB52CA9C45F47ACBA52F6E
BFFBC4676165FE2CDEAB90C0F5FCF4D3E1C6B0D30E4CA4041089B1380523952E
62EEC9833CE2B8244D4F114C760BA32BFC132BAAC5448AF7D417E1555F194CEB
2B1079296F0EE74B77C6CFB9DFE331EBE31AC33310B87AF96B38F41D5B1ED913
087AC9FC9E8800CB2488F44B04EB3E56FE4F6102CC2323585A24A997A0A300BA
4AE42FBC57BD3E8FEE00FB0C919A4A94706AE73441D3E0768E47668DED001F93
3AB9D7545A7689A8461F70ED96B448CD34210730654D53B197C3A52B81DC9257
6195EBD6520A13F8D9FC003A3F755FBB8515428F65464BB5ABCDD56FA02147BB
7DB6EBC701EC1287818F83F183EDC401317866D851BDB65099F74FF52CE551BD
5A506EBA391380D06145207703694F1DAEA4C6FB5230CAAFAC33C36EEB3ED270
F31F997D611C438427DEA561F33A38F7DF02720B2D5B478DC3F0CECB58671B3A
C6497617F31CB25DDD49BBB09621F70534D4A5C5CCCCCED25CAB6F2287DD6799
D7312190518E0856610B3BA802246392EE2EB592B7534E115EBAAE5FD47A3F67
BA0FE24D41D941521F99C2D9B93581A1F4A937D9E3C8C777B6592C429605BA2D
3C4A2CEB7BE92538F19A03CBAF4DD75718AF4F54F1BEFAB32DC25A4DCBF77F14
2EED40572E39EF867D755B5E5B920CD518E17A07303F8E3F4FC32B9F5548E47D
60332B5C1F5099A175C40BF76D9041360719197E8942A500ACCCBCEF58049917
5D974A35B949BA3FE11B686CB85360D2D588A5781212AC35A7D0A2F93B135A66
9D7720E85A3D021CF8533EC10D09419C222198CEA051C4BB9973DD1CA26CD125
AB4A6E2E79E49A8BA7C6EAE62A8D77054A8A5ACE6ACE10B611BEE2A885583D5E
9CBDEF4966CFD0E4A26A60C0A310C86222993A8C07250196C166F8A01E004A50
93E9546EB67C1CFFFBE2FA5CED02FA4941AE88BEC31DCA794EA958C9724BD78A
7ACCD97F9F26CE1CDA02A811BCBA32D77EB62D802A955FF97B01C47F52F5FCB8
DD164312B21983D1E8460C799998D0928690AC0A54D71A65F2ED3132CFD2A539
C3BB91DD6DE40250EA511101D32913ADE1B736F998D199B554C0C3CC0A016190
AF7D2309C369673C6413180EC92C7994F8174DD43A0B38A00624D964AA23A437
CD7928C67AFB3C9C3C471D9D0AF2D31E4DE8FA935405C4B05B7F1205C16BAF34
4CD3242A7218E4C23056F2388E7B9BA7A2E98FCD58E07CA5215093D8C3F6535B
C7AC96A70B2418D117949D841826C4E5A7470FC13C9E8445E26F842CA40E1304
3742BE02DA9D9CEEFEC8E88483D57105822860A16F290D5B806D6FB5889989D1
B7141E17D119A2126CB961BD9DE80C3746D952C234221A795EB7D7A8A7E9EB9B
C31E7831AD47FE61629ABE4A6A79722730CF250729271CA0ACE3D07744BBB6E2
3B55ADA960F9396053909C6A737736E118297DB9233DF1CA0C2F660B201941D7
4AEF6CB87BD661D72B8676A0365996F80AB520474110B2AEC331B1D7F8F65FAB
793CE4052D5D2939F5AA76C37BB26C4FB31707B8C3A2F11804E0DA811FA3DE91
20F84EADDCA8C37DF62E9AD32D9E98331E17BFCB6F65D36149819BAD8234E75E
93ACEC494038EF8C96AAE357FECA51ACFC2C053A0DF65CD829C8B102CB370005
71073C45FB70FE8DBBEDE5F6A00B58F1EBE37FEB54DFABBD32355CEB2CD6D9C1
FE1FDB355AE9D10DB0F98A5A84C6CB95594E1CF8837A21029F4DF54F6C405E63
B246E67D6D5159B5AFCB45319FECD230F94A71B860724392882926BA01F3BB2A
848885468E37864184F1213AF38D0FF67194549F780C6267AB36C3B0C7AD18F0
8F36208A2CD86F73C2CDE157EC885EA0FCF9E24028F0A21D5CCB921B17CCD6A3
5530ACF03BE44A387AC10B817B91909258F677C3A12B91115528ACE8F0D34587
62B833F048E02C7FD14A084F60DDCA423D5A74C83E13DE48509E40EA896EF136
96FD21B2EE6A2B9D98DD88B775911D39DA55D49F1D6E64AA1A269CEE28971D6C
24BC9D3D02B665B41F90F4E2033BF2AA25903D426575B6A413A5F7DEBD5E478C
DA8C2F2E1637B6B785E97D4F59F9276B3F5203B107128F5EF3193617F747D147
9A34E1B75657B4E34DCCF242A7FD9AFCCEA1799D0CC345D9FB3D44D1A5205464
3E999B0814BE901EAA86072ACD1EE1BADCBD741A2733830A7045B15D96997F12
80119F1CD5B0F3A793F7E04477E9ECB12E4AEB350F93AA15B38AC108AE6B8256
86393894C94E49ACD37D36EC8F0469229E36805AC678C476403299B6B739F050
9EB8F8254915647BFC36D07E89110AF2997A0C54AECAA52956CC52EB56C6CD62
628851234B3A89F6CE26D348D434BF0CE5A1A49CE25AE65EDAB9B91DA8330249
1DD05E95BFD176FC07ACE333EAC77615E9889E998683503CF708674ED51503CF
6C371DB546671E5F09BA23575B7C9932C013F9C3898E2548484E9B90145DAD68
BF06907009F4B737423AE1B4DDC37581277F758C046A846474EC10DECDF39871
97CEEBBEF952836BD5785B7C056991A28A496F70EDECC246A1A96A67E711C3C2
9B69B7F0E33DBD6466B846F5984BE3CD6F1304190842F49B062DC4CC3AB26B2A
3E48180BD41B34F1EDFF1FB5F041F3AAF8E6035ECC6B2D89BFF0FBD107F08748
19453BE2F9CA0DDC01E60A8BC5463BAE55E46F691960DB5AB0607CF1A007F15E
DD37AD04D51A9061AF55B392C6BB5E7EC79047E9E53EC322EA14AFAE4C5E3ECD
956A601D1D39C9B8DB88637CA62CDB704181DCBD471867456DD68F095F786678
4904E8ED3C309EE08A8CE3FB6D339FF95092F184BC6FE3260EFC60FE51352945
E7D23DB27CF4523DEBD5AC4A1C3486D2A47DF0E6B8EC70C3E9EA4AA3E01F1D69
37AFA387ADF993E323936298E0CCE753D38218B0F53A570FDE07C05548DAA32A
26507521D2FF3CC3F40270F08BE6C626C1A6486F8F2A4D4E38C1CE31F607D5E7
9A93F1D81CC6BC186F7659A959414FCEE0315AEE1AF58852B50FD356FB80FF68
3DC74178276B92DD013524319DDF75286FE7B39DFF9DEEAEC28B83623DF59392
CDB7295B3A4BF3F3DD3D3DFFA8DFD8E6FFC71ACF94FE6B0649AB53C9C9E16FE4
840A8A8D63E46786000D4ADBECB80A97B7A96F4B2C0769A1A1EEB6C6BAF55FFB
292CC24D49772CC401098395E2BDDDC440ED1508EF2040D6AEDBE36185B4A639
FD275B3F43F5E113D132FF10D4228E05103AD5241CB9DFE456B584523D3B2DD0
30F3244FAA4375A10548453F34530CF238E1BF114B17EAAAB288AA4D0C553DE7
EF7D6FF00055856CACEA569DD35E0F28454E595C21D50321B609FF3D09DA79E2
4B3A8E907DC069920E3A8D6E7303A9FDE19B01AE72FB20AC124D9FBF7178EE6B
F5166A19431DE2229C5964EA728DE0AD8B03E503E78800A22A56922E2F771D95
4FFE374695999584706237A483F24CF5F3036530E63BB7245139DDFF2E8BB247
7F4A6FF852DE6F428F214F8873CEB3D8BB19FFB95E5999AE0AB130C305BC1A72
0CA369F7DBECFD2878003C4F66F3548332F11EE182A0B4404C15CBF1BBEB9470
7D1A579F70C4C55BB6255E1873E58DDFC8630363473E43FE2409A3B2216D5789
94CA3856831F476DBF16F6BD997F8B0291874E29573172FE23AE6B372E38EA89
CE0D2B70F7938618E2A8FF424DD8054876E4C94A5572E186F05DAEACF34560BD
DF8056B3EB8D29B0ECF1D98CD41E73043FFC3C376B4502C1250872A8A7677461
202EC409FB9B7BD5F229BCDAA093F5F517E20AFEA8B308A23F989EC1BBB1EEF0
09A76568E7B4C6D3E093A242A9B357DBB5BC9E78EAC32B586D869DDE047FE289
67CF675BBABEB320456E08E9BF1475A7874E5B54986CB2D099CAA5AE65F7454F
ACE4321C13BB7E5ADA00AC5FC50475E520DF69F369C2AA718A87993CF3A6CC61
7A1B3E56D2CA71F52E42393631F671CC4AB83638C191EEF7C010BFF5F64A2327
5A423A076D415D01DB41CD5461DB3A5A99AB3EA95DF3A2618AA82A6C7FEE2A8E
43DED0510608B777F8EC14AC74FAB2B3F6864F62F033A16257B4C000809FD511
0133EC185F9E78355CC666B83C13564FD024B929FF470796626FFBD094E78452
E3AB4CF592574CDE4145D1797BF9B341D6EF744A870DDFF43D1D4A24F5A29AAE
01B0C05A6150AC3499039B21D12A32538EC625A74ACE72B9F665C7C73F3F9F4F
E79C9006AFBDDFCE86EEF643679F6FDEC259885F7699542BB6B2BC9986CF64E1
AB6382F993834C0F00ED49F055C3AAFA37E487AC7FB1B6874F31E8216080ADC1
9F1495A99773F2F3CE8F5ECBF84DB68B8EC3746130F5DFDD758F9797E2A66231
D02BA6DA32B4AD3507465D677E4C6E14ACC5469D25C1F0A44E34C0DF8032EF84
EE4F7AE2AB9E98CFDFA14A4E709EA7EEBCB1A40E6E6E2023D91389B0F431F827
A7545D4F9EB95FA142400751E5A8FA9835AB61F35ED21EADC0E0117731CC992A
C4BBFE1E0ECE0BD49A8D01C1A22B23D2574425D40D435B98EE9545DBE4DFD3E6
A6204087316C8408282C4086DCCA2FCF9D7904566A3BB05ABCE006B6E65B6972
7D37870105DDE3A73EB5C6CDA1D0E1D5D68381857A04367602B4BE51EA1DE9CD
D2B4250C4FA7579B899D191C5D9D537471F265B018F46E779E8F1298C805E53B
DA3A45214D6C5F425A219A34244A6976F3260FFED07AFFD1D866A5B76423CFCC
40BECE99B1A1943F73B6B46860DC202F3D3FB018A3F032DFB948D0A2D9BF1282
0448E465F36D0197BCC5A1C26FA44D8614556C11232A1AAB4422DED8DC7107AD
E5364B7381DF6917ABBCC6CEDEAF598233F88DE0707855F5D98BE5500182DA94
96E6F8D85665B9E45E9C42C532BEEA517FB3022551F1F1FF0F3427E1299DEE6F
CC2B2695351C7E1A0178118CFED728F98B5C0DBFCEF2E6BC30888E3CA4CBB0C2
5AB32FDF62BF25F6E9CF16E3656AFEF3A28F3153BB7249C5D68D243B55F7BED8
F7956E2D65A45347D67D0D0AE1EAE048EF1050DD44B40F52DF8C96848F31A62E
3D5A76C20B050B112C7A95D887EEFC7CB00C79D12B9B1BAE7BA2C675A24AC8DA
DA1508F1CE3055532FE2C740732B5EE9D11753DACA156338F8A49BB7FD12145A
6B69DECFF84DBFF3FBEE96747F8FF211534EF331D854016D6C068F63C4060502
82AD3443A09D32A0D18A658537DC8D5F3A8E1E070912E3B81FB2C7F95EC3A1FC
BAB994882343891072EE156031D4B6E907B98380A76B2B6D394E873C78A5046B
D86FCE25F9607B38E67DC8CD993BFD9FD4C5D2B239819AB2D1036FDC200A15F2
5C4BB3C62E6B43DF64C9B64C2AD5DAC75DA9F42A1CBEDB159463D75BAD521834
9201958DFB47FEAB1045AC00494CC3B8E9B9D67CAD6B5F33E49248FE7D490235
29603FFB9A247676D87FC4215406A732550D8C0C017CD320CF29ED0640AB9042
106C0818B2AA34289F56B471BD01C6FDE62FED2AEF9C150B41EDA79AD91A3E81
5EA653C662BD8BDC2D20DA
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMCSC10
%!PS-AdobeFont-1.0: CMCSC10 003.002
%%Title: CMCSC10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMCSC10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMCSC10 known{/CMCSC10 findfont dup/UniqueID known{dup
/UniqueID get 5087402 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMCSC10 def
/FontBBox {14 -250 1077 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMCSC10.) readonly def
/FullName (CMCSC10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 79 /O put
dup 83 /S put
dup 85 /U put
dup 97 /a put
dup 101 /e put
dup 103 /g put
dup 105 /i put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 118 /v put
dup 121 /y put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BB89566A9BDEC70EB4F2
048A6EB631F05C014D372103E37FC3FA317EBC9973565A638403DA02E48B7D31
CFF6C241DC5CDB470561002FF46437C06EF93BC99352DF04393C661FFFBF4BA2
0723ABD9B3E9CA9E63BA57EFDBAE684655CBBDBA15ADAE43E1A2C98A3CF060A3
D16AF8FE3A49B50A24C20EEED716E49AF6013D4D38CD9CC41A91C17E4D04D79D
567E1EF49110AA9C34464E95D81A730ECEB2C9AF38FBA6B45E253288438B4CB3
DC75B3A906D4357293BA41E59C35223A6C9CBD6FF5FC90C2D07CBB376C7320FF
435A6251822BFCBB612CE630EDF826C37E95F541C21B93FCE127591D5E38165E
2B58A34AAE37712BC58B63FFD70AB80F4F24612CFD2F1466BAAF3CA2BCB45148
D0DEA0E9B8FBA4C4FF5B8B3CB02E461355051842BD1C94F41066B9B909DB83B1
DCDCBEF7CD00A43E4C0B8191A29600CA197F0BA227FB8309BB539D2A620BAC70
8A1AB2DFA51ADC9873B8E5582DCD3ED154E5D727D1665F99BD89883D69E6CC2F
DB3A57AEB612171A88E22F038461DE03FC357F771675E34E90D4D19B4B36891C
9D2333960400E97494F4FC4DBCE6A73C34A0409E433BBDC0AAAEBA7D3555066E
1CFBB4515C8B573C9B9DD12ED5B6ECEBE35AD0DDEA9DB004FC6CB540B5117B49
59CABE5FD74C6F5B6482B42C20B5FF0467D1DBD7CED2CC651CA57852B6FBB402
A6764DB342889132C911CAA713A7F2FDD8A5E849345D6C81025E02F5B8B682BA
90CC9B467FBC37362436EA6BF8EB62D784B01D5430147945BC09D1F49EE89F2E
3E2B8E6D439248A56F82F2E03EA5C7A922F2813BE6538A3A423BEBC55B345AFB
3B3C125306749E137C647D78028AE1FBF3E1A82C260132832A9668F454D39C41
736717DED0A99F6B11F005F0E1D07FE84713AAB4C042FDC166AA146D7B5E9198
E4F485BE5B135EA281FF1C1E616B5AAF02771F58C5840CB5A427FF9794F93E94
17FD799C78AED1DC4810BCEF4C6C51D3C1504EA2C6F2B29805B7ECF97B5F637D
FE92E168CB9029E90404CB54FB312FC7AA8A9F2F524C03E61F03B1E31D4F061E
1677B39D5D30C9FD4673E1723F4AE3CCF38593AD6D7F61E9DF3C010E51F25085
35D51105E1464BA146A78D7297D4D310AD91342A0BB942034A3EC0696B467367
3E39D202D637E6B14D0EBCA6AD3CF22B07D4CA69C0FCBB6C93782B2F0DFC5AC1
5D8A16CB5EDB671A0C1BA9D10F63CEAFCD0E06E42C730C8EF769CCFD57937245
658F486036D37E8BDDE5670A212FB488A8753322A5B170C9662750AA958C0BBD
8E97D8239D2A08B30416504DEEC4E506013E037C91785C674F8A6A44E23FEE6F
CCC00CC5E4D355B0871FDB8ECD64F70EE32449BB5D6F84F8C8AA2D5B1A489BA9
D7FF2DBAA8D0B84054E93D64D3E77850A3724824914A0F821EEC3D605DD851A7
606936B8B9E24D6E932E16C448140FE94DD96C75AECB73850035ED9C04A1D93C
64B21E7D4657E030483EC5C3554AEF8BE4D0FE5B9743B875340B09E01273DAE8
F256C50A1A8F2E0417440A8BB0173F59E11523E1CEF2593A4AC5AF2167627B00
C5EA97D125EB8A4BD4C372877ABF10F5B7B149D73787E0834BFB3084E9508DF7
072DD71637019599252059738D4D6BC57A9358E4B14F6AF9C4B31DB8E25C29B3
7A15F9953BD73ACDE5F0445A5DC406BB4635FAE51C1D8202AE31730E6F355317
1DC197DB0B6177307C60E5D38F4487363EE051B2E609A52BC4D45B14B6558B6B
5E1618748794B8340752CDBE7756C068975B559615D4CD5A97CE30BAA7B2B1A3
2FEF2E055232B24FD8A21BECDE1B6A479A28EC80AE2CD16DB50B30B4A6CFCF06
491C7CD5AC29FB964D4846415233947522676DEABDA0D9535F8507D33693930C
B4E4240A02B0CE7EA288516B8A6EF908D7F8BAF9012D052C6AC96D9F8F6ADB07
8984F3559C5E7E3022A957982155FC9CD599C74E18328D3AB46F9DD15D1C4C3F
9B93ADB4489BA02CFCF57DE6270F3AD2F8597BE71786510EF08142F430EE5568
4F9DDB792B7C46B6135E341DBBF062FBC50FABA80CD4A384157BAE57CBEA9781
AA4416323265168AC097DE7E30A0D4750143A4FCE70A863A31876A8FA5327C3E
36E89589E363AA2B1A6E8B09F5AEB8FFFD0396067173465B6503383DE517A6EA
88C0FC08578398C2A721E5AEB29F4AC9BC990A50CD87BD35A11F9E81F68E7B85
5E5B95A4F9A5D30379EF90D78E1E466DEF867BAEFC4F5ED2C762BFF099C1C2B3
5E0DA1C2FB33BE1379413CDDB1EE6BB3A495331F72F2FAEB8152E8AD5FD334A8
AAB0082A71D5574B618EA8D487B8FAF1B445F3395B1E21224F5492A0E06F5152
7726835C900E2E52BE3B7B654183AEDEC68053DD0AF19EF6DBC10B6FC08EC7D0
CC0E2C8FAF8C9A4C21FB7C34E074BBA4EE64226BEC8C928A784C1BEE35B72EC8
E9295240B29DDC2539CD118BAC38DB3917D14CD33AB45FE47E827F2A2B193AFF
53C5396C52CEA4F43F06AC2D08C74CC85D608CBA267175EC31311EE25AB48DD9
FE811B411AE426C9FC0B6044D1EBF130231623F1566CEA4D1C06D8032FD9808A
94479C842BC41B675CF6B90113BD681F8D43F51D5016D80EDC11D7640FB950D4
E709A46184406ED90D0892A4CD9062938A8205697A200DBE1F38EB166EFEA0EC
4FCB45CDAF82EA103DD6FDD03D146F3E42EDA6496064DB3F4FC1C5280C9E604B
D5EBCA08BF2AAC90156C11EF68137DC76502EBF216F3AF3EE30DD2676D218428
F41C655093F8B530FCA378B5769F262A6FDB4B66B83F18F050E77227E28D71F4
5F4425CB8D51B3DAE872CD86D7804F870BC564A6DA1CA13EDB00D131CE4F6460
7021661B99612629DCC20C85CF155EDC5111E015A77B0B82A8FC1EBB374B7EF2
361419BA93B857D5C9944BB5B4AEDD86ABCC261542077FE09701C96370168579
5F89D5AAA08D700E2643E88C2FB8D1D56D37AAA9744872E7C050B4CE046B47A7
83F224FA9FD311C955EFBF173042C8FC66524135F579B1397828870D5C9DC71F
8615FADE2A1CFAEA90F732B6C266E2F3048FC43EDA7A6B6D98E9DB793CF457B3
F5877E7A055C92B0246FEA8C72B3B3456F93BF36E2651D32CD614C3AECC0B4BC
F824C8363E593A6458D37408FC5B09883B280005DD24123E2D4B1B85F4113327
EEDD9186A4AF2CD6439B46C5C168C125CA80F9EE9E68906620EE126CFBF26E15
B269838A54224EDCFE2A373EB750D4829BFA410DE5F1541E428BB1E024AF496D
F5F1C151F5A645C8622F2EF9088D57A2811868A8A8BFCDBFCE3ACB8463AC35B4
8B6F44E1C1232805842F56FA468F81FF37D5D55B81CA56058558544C142EB3BE
07CFB1F75DECB1E48C14D6AFDD455989AA6FFE8B8DC54F462B3C20E31D270BCE
8E68E2B43A6625AC7E9792704FAAD6CE8BBE0B341DA7189EBB3E9D5375B27FD4
12506D5BCA50AEDC6955E6C3C7BAA84BACAF7ABDF3A270C7734EC3C6EC22793B
E67B0E288F99699D38DA8B79F2D21DD97945FBDDD132A8F0BF947950D3C0B4AA
EB7B2C435AFE54489E1930610311D718AC610C21A644F34CB2D1959B3066F39B
EADEAB5CFC6AF4D191D86B02402B00D1C5262707861C5308730579795EB53207
A291A27A8B5C4DAE0A87A0C6A260026CA3CB620E1002E066A515D7990F3DEA29
0FAC962E0B82B7A6C86B1EDC54007822BAECED673FAAEF88C8109777EB79A53F
AF3C58546974F2F56E70E9B5CB59ACB5C27CB01895557B2D82134D7F02029B24
3331621F38E68717F5CB68A8892D0B9C0A8ED4F8BB56E80505170D44C6856128
2DED0254ADA4875CF56B4D97372AAE730D4C77A2940DC8C178274DF88A9EE037
215C6FE7B9D481EE4DE809B124C0270782411ACCCF89906A8B143D0BA8B2CEDE
E9B90465C3E57A4FD9AD2702323450256ABD09A1F8C26F08480317C08B75B720
70A161C99715A35A94DD5C9647ED0F8A5337B774C8E54F9653AC859485A1FED5
37B725A7E4BA58711CBCDA6054E34CBD8E9F9460179DA7DBD243D81A1531FDDE
BF2BD425BD9DBE75EAA333B1F5793669A215549A774597E6ADA16D323FE5601A
EDA41092730009A99BF5B5AAE281844A6BF3292D4D4EDE36B4FD8BCAEB6EB72F
AC5D3CD53D0D621CA9EA8D254FDCB2B5161EE9E80B266563F669805A3A15271A
0753983004A1ECC7FBADF62AFEA4DAB49A178C231759857DB910668BDB07CB3F
7E8EC24901863088B3231EE3FA563924032C91CA9D68DB398F9BD9AC0C651EC8
9051C9F709CD784F3FF5951DECD7E869ACC34B83AECDB011E6594347855EE7F5
28811F744A4BD70D4E9077EA7EC19FFCF612689F12B34332857AE41F13E6D16A
962DB9B6AAAC167B9FBDF0068EA13412F318384134B29F3F0C399F1973A3564E
F9C3C39B5BDD4C98D81A6CB476E565860B50704BD65ABD630A5F1372F2D826F3
3AD47C08B8AD3176A170C369EF3CEEB190134006D6135C5B8CCDBE1C11FFF1EC
3F6D8C46E15C4F5EB9ED9F31A129594D542D40DC3815CD075A0DBB648D868AF5
15A05C4BDB28BF23653A3AD96CF6AFC065DCCCB23D5D9A945F8CBB539DD3BFA8
DB8F1FBF9B6F25B41EB4309995CA3D5D6ABD70CBB4A2F0C6364E5439AD1045FF
72F6B45A30BD3A548CFAADDCC6C15D46F6D783D3E520215751DC98335A4ED512
D7D19235CDF911CC69F3CF4365B678EBF3E87C456A4E77339C74930083445588
462529C22A96A28C5CE87AFA0C981F26CAED5A1C8DBCDDA612624DBE0373F026
465185A4D8C73CCD8D71EE97116F8F7D341B87FD78F9CCB9FBDA2A7799711607
6BBA855AE9D5C505870DC85FDFAAA130A351D56AADBFBD6A7D52055E3200F8B7
8AE9A00092B55DEA8BDE224B4BA7FD4A191CB1FFC4CB995FEE1AC2883AB69E1A
AFFC09AB5B9AE311A030A5BA05E2213F9BBF016C8FA80689C069314D91274B20
53FCC65C7D7B3A7504887525BFFA060304931672A078BCD7F269595686310E34
E1ECA868899BC402D17EC36CE40D5041D7CEDA77F7764C9D98793F5334F574DF
E93CB10A5E8ADAE95CE63D2339557091B4B4911A4987CF21B7F1DBADBC2DD605
8EB72473C1F2EABCC44E0D0339EECB55DA74085606C3F89D57ACFBF5755A5395
CA8D4BD47E4EE8D8B882D3AB31A1F0C62E74654C7E041E4FF2693A38A9796064
46526B0A37E6B5BF8E48E80EDEF81E34DA8F6CC9025936A4D0E6D709D61B7B5C
AB550397117F3F9D2F5A542A64DEA8E1178F7337124D6B56BA92F659AAD694D7
391028731E01284BFEA635314A8DA8DF7A34EA3B6B2F8803BE6DCB423A9E8015
55EBD90EBAE8A00298B3B6B1C02BA516AF528122C1F2B07EF69F5466C2C36643
0D665D6561705509B7582D8301AF3C32E2F3B9433E3E04D62117C7E8A368BDE1
0D4DAA1C415B2A6573116D2A169AFEF700A83F55D88813585E89C94C07802BA8
3AE8F9BC3CDBFD9C2E35D062B1FD6E79E1EF104FC70B0AB09D12CA027F33F85A
22F0ECBB4AD55FE8C616B82C46CE69A600E4F767BD7A9C5F9B37A3196B038384
5DEF76A8884425FE598A63AEB19FA698C2AF7CAA4983CEC789268E22BA051EE0
20A40633D22D8F707626ED30E8273EAAD1C065F0B2E1718B5AC853ABE09330C3
B0082A71D557169BC1559B6D285A3499D41C4CCF1F74884EC3917EB9C574371E
AFE8578DDCA459B8D22C0188A8D150437B05FB92022C95EB6FBCC954216B5FED
CBC7C90B9A1F061376A9840FB64390A6BA99CFC8279A86A730C6DBFD14C53C4B
7277D676BD42203677E9ABEEC8C97E13DAA626474513B06F8734DD784F2FBBB9
B3B448B8E8221E380AB4A86D3A683B86A54129519D50DD4FE63B30954D805CED
A9A5D9A39C58B65B08E1C19555E927C6DBF7FD07252B2B57F62B905D6B488201
213D106A41033B26FFBAC2E616DA6ADA6D560BADF10E68872806CFD6F6E19D7B
57CF1F7A030A7BAD374F16A977E0ECB8742D034ADAF9C247DA19C8AEA74EF6CE
DAFD6B1DC562FD3B77E4D008BDE4D8C7FCA9895DA1AC9EAA01C32A0DA712B082
9438E77230D38FC4153E1711417B918BA6CC03203A5FF082AF880F48518D8271
C1121E4F1386B30A7F1BC6F10EA98443F8A65C867A109336B808BC9A8E2A75AC
F950835AA84B56F59DA4C8A18859C3B68F6B6DE09A6675F639EA9107BDB67B0F
54EBC564BC2D781B61C14363A54956BA78A2BB89C9F966C94EEFC29EE9F4E23E
C0BF750144DC289F0DEE1F8A25BB52E54F656FAFEE4BD2DA57E1306BBE648051
1D0CFD6A23A3DF082E3CF13197BF1B7FB22B2CD427BB78F455C9634DF989DC90
7BB2AE247B1C99AB2062855B2948341B0F857ACD750B59E370A6698C6A1F5287
72A4A9628A592E313956C242DF8277EDD2F1FDFB07CDC104275FFBF796D7518A
DF49FF3CDEC3BDFF1D290C382F244DF18005ECDABF0C5C2C64EEC4383E2E07DC
5C82587C071E59B46B7BEF31D268F39D9B12D534344FBA515E9DE8F166FAD1E2
7D1558967AAAD3829D3F7EC6938D20E5379F414532976ABA844D97A5E9078901
EAE4D0ED1F4C7EE7A2D80D891A5013D6409A38ACFA497F5A169EB7F9F4890DC4
62FA6A89EA48267331F086992B9CA9305E16611E6AEE67DCDD588A25D37F45B1
0DE75C802EE021E574B64B3969DE2E5061ED9364B646C38D4BBA86802CA6338A
94E135D2256920EBFB1AA22D9E90C7D16853F0DF9F2D942748EE540E4FCE63C6
5380D7AB4ADD6CB00FE8F7867E4862D8DB432F28331428CC350CDF7F447A65ED
D7683ECA35A22ADD06E9FE6BAF060913AEEE7B2B8EE4798E437698CC9EB2428E
74CE73F84D0D2292DE709D71FFF8901C3505370E6F1D4E28E6B7372492C65A88
159371B1D60D77CEC93B272B6C5394EE1D2EF9969DB2838B8E128553879A1BA5
2884B0A596E8FC3D1E648B7E26A4AC57DF09B9CE09B2F91D8CA618CA52AB3DBD
D005A56A420366069B73146A6F58E88BA49671A1AB7C2070C3D42AA770285143
40AE7D7868C0E1993506B07C086AD7D4F28CE2D15853FC5FBCBF9425D8012B9E
DB6E1E5002517659C8DA69DCEACA94F368537668843D281FC11782F1C5F71977
CA215349EE6F20565DE3D8D8212A40E1227A4B22965FA64A0B02C62BFDE97E6F
C3C54FED4057EF9D258C42D7440C78C5E0CC58A40DD74ECED4152F70A93CE71A
1B3A57C46F74A6D27BF98C97CCD31A8EA487260F224A3E40F52C65490AB4098A
7B9EEB54A5A415C8C88568F7D9EFE74BBB785FA18AA27D9201F28BBC477A20A5
D1307AA78EB8C7CAD409AB64B29E4115E45F5FADDCC80CA74B296C4265A40614
37F2ACD8386AC0202D6FDB6711E8CB06442F209D781E940ADDD6D881D4F8E874
357C533115923B90138FFE31D3577C6AAE60D768970FAAB682CD0DCA3E9A9A68
6393E4B772691C1013ADFFC90C508D51B02D2518ADCC7E79F7DE5DF9D18B8435
6129064DD1A3995E5A6F45D78287CC10A0EAFBF47223494C5EA934B1BC2F7C53
686C5880303F9E3ADC8B100D441D944686E1FD811C646C6DD0224F6CF55FA87F
D132EF50450879A25242A18683BD6D0266F8F333F3768D1952B0F32AA75106D8
EC0AB703F287E847CB91FFB88CD9DA174B49171822BDE34621CF41EA772230A6
3088F8D19CF2364A329162D39E166AC728B267758341630B00398D64538FCC4D
E3E6CF103794C29AEF7F7E56970F6B1ABA87DC8D23E280EDC77556593D02DFF3
154883CFE4EF04E07E7539A4750FA1CF1A994E99B656E728D140C83AE1F196AD
9F049188A4184C84556C0476BE46DDA8ED86888DDA3065C5091D99EEEAC43092
40B97ECF9E6EC8F51ACB40869E5A6E08A0BAB6B7892A232A3A1E688B81077DDB
844137AB35E862CECB9761D4FD3514C707D6C00DF5F2109C43785B93336E939E
B40A8E211CA36120572EEE2EA522F9BB1A60FCCF768D4D6E62F4F6521A7490A0
7CE1F14CD451B5A1D6149A6AE7D0F27B7E0E31F556E2E06F41340ADE94AF27C9
C8C0CEB284B103EF6D31C8DB0FE731362CB594A3D6D3F6FB53FAF9D0CCD55FCF
A35A6D1380D6DC934C92C711FA78615E7719B3A277DFAC75003C6ADF473E6E46
F9A9F92DE9B013A47231C6843F7FCB8DF7DF917171F75B76060DE2F399E07EBB
4E47E0B54084F9F49A501AAAFF1052012B1DA1EE30A8A80925248B87C8B9E7C9
46B24DAD4628A8A12BE81E114A5CA588917CAA1840FA62162E09D5EE70D14E72
BDFEEBDFB2DB347477C35E1AD095DE33241F4EA1B8466F81F50BF6FE64611F84
1F95552D4E587695EC327309A69C2EF37E8DC77E8BD1D2BB773CB425EEE81A42
B3D3171E4B642C719C813590FAE43F47C36E5544A536121D0DE5936E270E3B2D
B28DB5013126B6F2C95CB01A48880FDB2BA4B97A09D1EE9C721FD83704B407E9
8F26B388EC1CFA5B87457F58735D3E54111335166EBB69314CEA8D04B24F2F9E
462A9DEADC762D4DD5700A7D3BE4A85FFC58DED128235BA56400301E07F45202
5AD77F554C02894E00C60A7076F1571B6C39E3F1B96E997C08B336A5AAC79426
38514A621528B3F4D30FC80153DAD7C42D584E0A6B81CFACD4C1DA2E7AE4E234
DBE2788B739437C21FEFF1071725B699C4ABE753052950CA5DD338DF6C3C87A5
357DC74A2C063FAB50E145931629BC0B18C6F05F4569D3C4E4B043DBD625C104
DCF8D55FEE96E725A0A18FF8F23295A790DEE65BD70E3247033C11E6EED1E817
EC22F25B4FE8DC01D8F6226C60FA1F6A705BB7021832E492E8BCED896D7FC83C
D2D6CF5FB84FE84A51A19145EE67DE6A8112EB4ABEA75C4E4C454612EF32BE88
CA4BB20783CA74FE9F9ACB67647F24886D13421D14DA1788D157745B6A0814E2
6BF9677D2AE17ACA2CA47AC060FB482BFEE4EC1E7F4AA5E1CE7622420DBD7FE3
515730F73521D58747D50927461CB88226630C78674687F9701B73482888B0D2
411766F62D374106F736E1EF26E9CA3244BD3D636252F2685DD17FB8B2966788
FB1430C9AEABCF06E2BCF42059D5AD057DD803616CBEEFF3AC336C122DE2CF86
768B0790110D00ED093C7A16B8ED471E652294FA2B898EAD4883CE10EB2266AA
60726AD88EDCAAF3C6C81EA5A31994C3668262B77BE9A40C6F9240982689313D
27621276A2BD6944A44CBF6D9F57C29BBC85998F4F14D76FEAE1B8C1A498B33C
A161CE592BCCB307AE2470DE85F94B105EB17F7194E8AF39A4F4BF55ABBB83A2
B19C3F8582E8A20FAC95F1E11A3EAE103594B1A4E2E6B610A9D2F6C27A057569
BAC840AE1AC726BC5BF96628DC7D47C683A4243CF4113C9B5EB8ECEE00F874CA
A0A206B072EB9839D3DF3E0B922D0C704B83B82F60FD8D8096103A16883E4568
CC9A6DB7B9BFEC562B20733BE45DB9AA7B5468A059DD4ACFB04EB06615B12ED8
91C14FDA2A274197582A08E7083F01692CDD8F02F63069EEE5EBF14ECDDAD0CB
B223E659F80831D8FB2B0F91F6E4AEC78178D3B404EDA0BAD0B1D4B73A2DD4EB
41608DACFEB34504D1751BC6F60D9F890F0CF1B05D9543A2B37DD4540D680EFB
793B8E3FBAC4BD3B282C19CC333D8E69DFF01A8DC5DD8D45E13393C1DC8F2006
C1683E1C99CF4233CF56D7BB9FF82B8818D6EE68C3D482C7914BE1F964B57E76
36660D2ACAB97307CCCD30A15BE644EBCF6F8DB5CED8FC169CD1E75D65F27C2F
53C0B85B8960447C74C7A36BF9E360E714C824E81C66521539B642D0F3071A9C
04CA4910399DCC803D06E9533C00FED555510A1E6ED55C0590FF06E941F9185F
2A12E74835F5B11C4ABA19C32C4A4FB720D0CC9DD1DCD8C739036E801BDE34F2
F0ECB3B4096B7D31197F11D020C86224ADA6CA3B8F5B6C59D694237BFA7D61D0
BB16B36A43E37D7AF6BA0D9642463597BD74D3240DDE1E7204AA65278AE70C21
49D82A4166A09AD19039BAE0E9A06180F40834B352FF5FCF7CE9FA3983EA953D
9A4A9207E4DECCD09A2A4F2CB04C74B2B5DFA67B13444BD84D890FD4A01A8056
BBFCAAA7AF8EDD6DFAEE0265368C61329F82E5647A4233E34D103A422080BA47
2CB39FC7577C1C55EF5978AA7004228B0D7A3CB5887D93794622AD1CF371E82B
91CE6EC9EB8BB9A828DD21F6BAB7EFFBD4AAB5AA48215F892B766CDA3145386F
2C6287B80419833CA31882C887F1034D62685CB840A5E4B75F9E39C369A134D3
3585835B1696D048192AE767DD5F5EC9AE3421A21303EFE6C14F68908279EADC
1B02621AE5366B5FBAB23070502F147CE0A2C5760B21C4D5CE580CC3F0CBDD35
5DADACE067104A948A8AF4356D304B6E6B89AC7331E7BC549D72509C9997545E
59D3800E7F890817298BD62BA71A8CC282E65948EFFF7CD6F2ECD2BEBA13ACE0
3AD4429F47E3B63C098928FC2721C010C71E15FBCC8554CB9FF28456200AD396
04D559BBC063216942B86FA5CD818A69E98C65751B63C026BAE44FA38F4ED225
694B25441B2CB566B24AD398E0AA5DB1B64077A6D2F347FA56A51609D7CD4676
A5269D997F9E73AEE5FB2A2545BDB7C2AADE5D88D4397840A8ABB2B6F4F6441E
DD3C7E259943A309FF07E499710E8F7F32AE2B0C78ADDCE41E665EA098B1C708
1BC306711341538901DBD99D54FBC508F48C7ED7F381BB8DF7CAD1E2BCE00279
4741BCFCC2D1E361C92A5AB4F041E7FE83B8E71360F3B06104D7465F2A31B2A6
D2DB5A516462F6C9389336F8267D0A7F260D7C28B5D14F4FFB4CE41BB79A55B1
7973CEDE4EC91FB71546A3C7C774A0ED48D3111874F0FAFC85B921E6E86DA6AC
8C398A7AC55F697D46C94D49B2CC4717EACDF38916506BC1C915355AB6890925
1A473979E2EB686CBAA777F26CF0338F61A940E0AFD8670FC0666DBC4D219483
3827B0D54147829F46DCD339016D51C10B42E07591DE9E05BD3F9A4C45B24F71
3E0E23D8A5EEAE76235F787CEBF7FF256DA3FC627FC119F564E672104199F201
7334CD8B636F0CCD8F003066F9C77F89685C37A2FD72BD5DB61FDC81A8567884
549940B4A0D24693F0EF933DA81B2790CD056A710F8583CCD5FCF88DD8E3EDBA
F7668BE42C2286D14D803C20F4DB0142177C5D9763B2BCEB5669F82915541553
914C10853F7C81652F27A3F00893E391398AB4ECB1BB98F3DAFB3CED3F32131E
B21393EDEFC22D4D137ED9E700E5782FC4C2969F17987E439053227D9D94FBA3
E319E0F4632CDE06A283E9790503BE8A10B39ADDA07EA43D76E1D39B94F7D13B
4A150D6B6503AF6FA684E09FC3C07F9FEDDF76C86204EA5C5146E2A4DFA50DB6
2EF98F1488EED2C1817A5DB07FFF67CF2CB8270BB67CC2C8A2CE5BCB1AD00A86
48BFD671E4C1FE0097A0033B783984FC8D6C6F16A025D7427EE293FB7768B297
2CB7A3E777C823EE0D97A137BC0486514F69522E0E8A0D9CB32CFB6908A77967
D5729BC3D6D55F525B3CCBC39021FC0AC1979BF793CB619CC3FEBBA5CCB4AB12
C4534CEE9D80F2E8C2B8AA6B8771589AF8D73574B85B16B7EF80F236CA8DB911
D7A9067E854EBEDE77A948AF8547C993A729D8C39067BC15F526C89D06777D65
901DB6896519BFD0220BB0271E5083DF4E1D2AF87BC0E388D1BE05B0AE45504D
FA8FC0FFDED7EF0895EA83D4EE8C9F6EF43B523770B362C19BB6DBA96B7D376A
79ED044EEC0D694E6D247F35F0F45C6F5B6649A777D89A005F1786AB17AD6AED
2996FD0338A4A0C604874CC85A7723E08016CCADE16201A224CCF2FECCFA125E
D69FCD27C0B763CF2C17CACB3C4A9216123ADB667C6A16C7CF4B1E8009C425FD
AFAAEC275EBA4E4EA02124BD1AF817C9B651B43FE1C154638F94651000C15359
D119A407703B7A9DFEC4ADBAD47248B1C5EC331C2D00C30E4D7E3A163A9D8927
05CCE10FA6F21E700F27FB410CA0D09FAC256BE2552A1DB695C9958DD95817AE
BE036F11557C5B277C796BBCA77FC54D437732DF50CE33E40F4898DD74B41D18
F44C5D0C54E4F6933B209D032409A5502B26D374B47462741C372707FD82831B
61E621DF0D2E36056FC2D115756F4748D94E64C231DEFFAF04994E8F57B870BF
45137263CF2590391E616053F92852D738761D2782BB96EC20ED120AA9840D84
69CD8062E4A37F73358AFDA7EB96FF15D788689A31DD877CFBA3AC080194DB73
73C1BDC7
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 40258437 52099151 1000 600 600 (problem-statement.dvi)
@start /Fa 138[75 52 53 55 2[67 75 112 37 2[37 3[61 1[60
75 65 13[75 2[92 2[128 8[103 55[75 12[{}18 119.552 /CMBX12
rf /Fb 139[37 38 39 14[42 53 46 31[72 65[{}7 83.022 /CMBX10
rf /Fc 139[38 1[38 2[49 9[43 1[43 54 18[76 24[49 1[49
1[49 49 49 3[27 44[{}13 99.6264 /CMR12 rf /Fd 133[37
44 44 60 44 46 32 33 33 44 46 42 46 69 23 44 25 23 46
42 25 37 46 37 46 42 9[85 1[62 60 46 61 1[57 65 62 76
3[30 62 65 54 1[63 60 1[62 14[42 42 2[23 28 23 2[32 32
23 25[46 46 48 11[{}53 83.022 /CMR10 rf /Fe 136[78 1[63
1[48 49 2[60 66 96 3[36 60 54 1[54 60 54 1[60 14[85 5[73
90 61 45 87 3[88 23[36 2[48 48 40[{}24 119.552 /CMTI12
rf /Ff 134[102 3[108 75 76 79 1[108 97 108 161 54 2[54
1[97 1[88 108 2[94 9[200 3[108 10[151 3[148 2[146 19[65
45[{}21 172.188 /CMBX12 rf /Fg 134[88 2[88 1[85 66 86
2[91 88 4[43 1[92 1[80 3[88 11[117 1[88 3[121 79[{}14
143.462 /CMCSC10 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
/setpagedevice where
{ pop << /PageSize [612 792] >> setpagedevice }
{ /letter where { pop letter } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin [/Producer (dvips + Distiller)/Title (Problem Statement)/Subject
(Problem Statement)/Creator (LaTeX with hyperref package)/Author (Krisna Iranwan, Jiongcheng \(Roger\) Luo and Drew Hamm)/Keywords
(capstone design, problem statement) /DOCINFO pdfmark end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
142 -316 a
SDict begin H.S end
 142 -316 a 142 -316 a
SDict begin H.R end
 142 -316 a 142 -316
a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 142 -316 a Black 0 TeXcolorgray Black 0 TeXcolorgray
150 0 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 150 0 a 150 0 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 150 0 a 150 0 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 150 0 a 150 0
a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 150 0 a 150 0 a
SDict begin [/PageMode /UseNone/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 150 0 a 150 0 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 150 0 a 150 0 a
SDict begin H.S end
 150
0 a 150 0 a
SDict begin 12 H.A end
 150 0 a 150 0 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 150 0 a 1021 98 a Fg(Oregon)55
b(St)-10 b(a)g(te)54 b(University)421 778 y Ff(Head)65
b(W)-16 b(orn)64 b(Displa)-5 b(y)65 b(Auto-alignmen)-5
b(t)1644 986 y(System)437 1607 y Fe(Krisna)41 b(Ir)-6
b(anwan,)41 b(Jiongcheng)g(\(R)-6 b(o)g(ger\))41 b(Luo)h(and)f(Dr)-6
b(ew)42 b(Hamm)1703 3286 y Fd(sup)r(ervised)27 b(b)n(y)1568
3386 y(Ro)r(c)n(kw)n(ell)f(Collins,)h(Inc)1586 5081 y
Fc(Octob)s(er)32 b(14,)g(2016)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 1 2
TeXDict begin 1 1 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
142 -316 a
SDict begin H.S end
 142 -316 a 142 -316 a
SDict begin H.R end
 142 -316 a 142 -316
a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 142 -316 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1767 1484 a Fb(Abstract)150
1667 y Fd(A)22 b(Head-up)f(Guidance)g(System)h(\(HGS\))h(is)e(a)g(p)r
(o)n(w)n(erful)g(to)r(ol)g(that)h(displa)n(ys)e(real-time)h(\015igh)n
(t)g(data)g(to)g(the)h(pilots)150 1766 y(during)35 b(the)h(\015igh)n(t)
f(en)n(vironmen)n(t.)60 b(The)35 b(system)g(allo)n(ws)g(the)g(pilot)h
(to)f(kno)n(w)g(ab)r(out)g(the)h(aircrafts)e(p)r(osition)150
1866 y(without)j(lo)r(oking)f(out)h(of)g(the)g(windo)n(w,)i(t)n
(ypically)d(indicates)h(aircrafts)e(longitude,)40 b(latitude)d(and)g
(altitude.)150 1966 y(Curren)n(tly)-7 b(,)26 b(the)h(system)g(ac)n
(hiev)n(es)e(this)i(data)f(from)g(the)i(aircrafts)d(installed)h
(sensors,)g(whic)n(h)g(is)h(aligned)f(to)h(the)150 2065
y(displa)n(y)-7 b(.)49 b(The)32 b(alignmen)n(t)f(metho)r(d)h(demands)g
(a)f(high)h(exp)r(ense)f(during)h(its)g(installation)f(pro)r(cess.)48
b(Ro)r(c)n(kw)n(ell)150 2165 y(Collins)31 b(lo)r(oks)f(forw)n(ard)g(to)
h(using)g(a)g(less-exp)r(ense)g(sensor)e(that)j(is)f(able)g(to)h(moun)n
(t)f(on)n(to)g(the)g(HGS)h(that)g(will)150 2265 y(reduce)21
b(installation)h(costs)f(b)n(y)h(aligning)f(this)h(sensors)e(data)h(in)
i(real-time.)34 b(A)n(t)22 b(this)g(time,)i(it)e(is)g(unclear)f
(whether)150 2364 y(this)26 b(approac)n(h)f(will)h(p)r(erform)g(to)g
(the)g(standards)f(set)i(b)n(y)e(the)i(previous)e(metho)r(d)i(of)f
(aligning)f(the)i(HGS)g(during)150 2464 y(installation.)35
b(This)24 b(pro)5 b(ject)23 b(w)n(orks)g(on)h(a)f(solution)h(that)g
(aligns)f(the)h(output)h(from)f(the)g(moun)n(ted)g(sensor)f(to)h(the)
150 2563 y(output)k(of)g(the)g(installed)f(sensor)f(b)n(y)i(a)f
(real-time)g(algorithm,)f(that)i(aims)f(to)h(pro)n(vide)e(corrected)g
(\015igh)n(t)i(data.)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 1 3
TeXDict begin 1 2 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
142 -316 a
SDict begin H.S end
 142 -316 a 142 -316 a
SDict begin H.R end
 142 -316 a 142 -316
a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 142 -316 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
150 83 a
SDict begin H.S end
 150 83 a 150 83 a
SDict begin 18 H.A end
 150 83 a 150 83 a
SDict begin [/View [/XYZ H.V]/Dest (section*.1) cvn /DEST pdfmark end
 150 83 a
Fa(Problem)45 b(De\014nition)150 265 y Fd(Ro)r(c)n(kw)n(ell)30
b(Collins)h(sees)g(a)g(need)h(for)e(a)n(viation)g(HGS)i(to)g(b)r(e)g
(more)e(accurately)g(aligned)h(to)g(the)h(aircraft)e(when)150
364 y(used)g(in)g(\015igh)n(t)g(en)n(vironmen)n(t.)43
b(The)30 b(curren)n(t)f(system)h(had)g(to)g(use)g(the)g(built)h(in)f
(aircraft)f(sensors)f(in)j(order)d(to)150 464 y(ac)n(hiev)n(e)j(the)h
(data,)h(whic)n(h)f(in)h(some)e(\015igh)n(t)h(en)n(vironmen)n(ts)f
(will)h(create)g(alignmen)n(t)f(errors)f(since)i(the)h(sensors)150
564 y(are)j(lo)r(cated)h(in)h(non-optimal)f(places.)65
b(More)37 b(accurate)f(in)i(\015igh)n(t)f(data)g(can)g(b)r(e)h
(obtained)f(b)n(y)g(using)g(more)150 663 y(sophisticated)23
b(aircraft)e(sensors)h(on)h(the)g(a)n(viation)f(system.)35
b(Ho)n(w)n(ev)n(er,)22 b(it)i(is)f(not)g(ph)n(ysically)f(p)r(ossible)h
(to)g(attac)n(h)150 763 y(the)28 b(same)f(built-in)h(sensors)d(in)j
(the)g(co)r(c)n(kpit)f(and)g(it)h(will)f(exp)r(onen)n(tially)g
(increase)f(the)i(cost)f(of)g(pro)r(duction)g(b)n(y)150
863 y(using)33 b(the)h(built-in)f(sensors.)53 b(As)33
b(a)g(result,)h(Ro)r(c)n(kw)n(ell)f(Collins)g(aims)f(to)i(explore)e
(new)h(w)n(a)n(ys)f(to)h(get)g(a)g(more)150 962 y(accurate)e(data)h
(alignmen)n(t)g(for)g(the)g(displa)n(y)-7 b(.)51 b(One)32
b(of)g(the)h(w)n(a)n(y)e(is)i(b)n(y)f(using)g(a)g(smaller)f(sensor)g
(that)i(can)f(b)r(e)150 1062 y(attac)n(hed)26 b(to)g(the)h(co)r(c)n
(kpit,)g(while)g(still)g(a\013ordable)e(for)h(the)h(pro)r(duction)f
(cost.)37 b(The)26 b(do)n(wnside)g(of)h(this)g(metho)r(d)150
1162 y(is)j(that)h(the)g(smaller)f(sensor)f(will)i(pro)r(duce)f(less)g
(accurate)f(data)h(than)h(most)f(sophisticated)g(aircraft)g(sensors,)
150 1261 y(whic)n(h)e(do)r(esnt)h(completely)f(solv)n(e)f(the)i
(alignmen)n(t)f(problem.)39 b(Our)28 b(goal)f(is)h(to)g(create)g(an)g
(algorithm)f(that)i(will)150 1361 y(aided)23 b(the)h(alignmen)n(t)f
(error)e(b)r(et)n(w)n(een)i(sensors)f(and)h(in)n(tegrate)f(the)i(data)e
(from)h(b)r(oth)h(sensors)e(to)h(create)f(a)h(more)150
1460 y(accurate)30 b(alignmen)n(t)g(of)h(the)g(data.)47
b(The)31 b(outcome)g(of)f(this)i(pro)5 b(ject)30 b(is)h(to)g(pro)r(of)f
(that)h(b)n(y)g(using)g(the)g(smaller)150 1560 y(sensor)23
b(and)i(the)g(algorithm,)f(at)g(giv)n(en)g(amoun)n(t)g(of)h(motion)f
(in)h(the)g(system,)g(a)f(more)g(accurate)f(alignmen)n(t)i(data)150
1660 y(is)i(calculated)h(for)f(the)h(new)f(p)r(osition.)150
1934 y
SDict begin H.S end
 150 1934 a 150 1934 a
SDict begin 18 H.A end
 150 1934 a 150 1934 a
SDict begin [/View [/XYZ H.V]/Dest (section*.2) cvn /DEST pdfmark end
 150
1934 a Fa(Problem)45 b(Solution)150 2116 y Fd(The)29
b(desired)f(solution)g(is)h(an)g(algorithm)e(that)i(attempts)h(to)e
(impro)n(v)n(e)g(the)h(accuracy)e(of)i(a)f(particular)g(sensors)150
2216 y(output)40 b(data)e(b)n(y)h(using)f(it)i(in)f(conjunction)g(with)
h(the)f(output)g(data)g(of)g(a)f(more)h(accurate)e(sensor)h(that)h(is)
150 2315 y(lo)r(cated)c(within)g(close)f(pro)n(ximit)n(y)-7
b(.)58 b(W)-7 b(e)35 b(will)g(\014rst)f(lo)r(ok)h(in)n(to)f(the)h
(error)e(that)i(is)g(deriv)n(ed)f(from)h(the)g(sp)r(eci\014c)150
2415 y(sensor)24 b(hardw)n(are.)33 b(Next)26 b(w)n(e)e(will)h(fo)r(cus)
g(on)g(the)g(error)e(that)j(comes)e(from)g(pro)r(cessing)g(the)h
(sensor)f(information)150 2515 y(in)n(to)35 b(the)g(quaternion)f
(output.)59 b(W)-7 b(e)35 b(will)g(consider)f(also)g(the)h
(installation)f(error.)57 b(W)-7 b(e)35 b(will)g(try)g(to)f(\014nd)i
(the)150 2614 y(correlation)24 b(of)j(the)f(acceleration)f(b)r(et)n(w)n
(een)h(b)r(oth)h(sensor)e(data.)36 b(The)26 b(problem)g(b)r(eing)h
(solv)n(ed)e(dep)r(ends)i(on)f(the)150 2714 y(accurate)31
b(p)r(osition)i(of)f(one)g(lo)r(cation)g(in)h(relation)f(to)g(an)h(on)n
(b)r(oard)e(sensor.)50 b(Although)33 b(the)g(curren)n(t)f(solution)150
2813 y(is)d(to)g(carefully)f(align)g(the)h(system)g(during)f
(installation,)h(our)f(solution)g(hop)r(es)h(to)g(solv)n(e)f(this)h
(problem)f(on)h(the)150 2913 y(\015y)36 b(while)g(meeting)g(the)h
(desired)e(accuracy)g(lev)n(el)g(of)h(one)g(milliradian.)62
b(Our)35 b(team)h(hop)r(es)g(to)g(sho)n(w)f(if)i(it)f(is)150
3013 y(p)r(ossible)c(that)g(the)h(inaccuracies)d(of)i(a)g(sensor's)f
(output)h(data)g(can)g(b)r(e)g(mitigated)h(b)n(y)e(the)i(output)g(data)
e(of)h(a)150 3112 y(more)27 b(accurate)f(sensor)g(that)i(is)g(within)g
(close)f(pro)n(ximit)n(y)-7 b(.)36 b(If)28 b(w)n(e)f(\014nd)h(that)150
3387 y
SDict begin H.S end
 150 3387 a 150 3387 a
SDict begin 18 H.A end
 150 3387 a 150 3387 a
SDict begin [/View [/XYZ H.V]/Dest (section*.3) cvn /DEST pdfmark end
 150
3387 a Fa(Problem)45 b(Matrices)150 3569 y Fd(This)27
b(soft)n(w)n(are)e(program)f(will)j(b)r(e)g(able)g(to)f(measure)g(and)h
(calculate)f(precise)g(alignmen)n(t)g(data)g(for)g(an)h(aircrafts)150
3668 y(transitional)21 b(p)r(osition)i(b)n(y)f(the)h(giv)n(en)f(amoun)n
(t)g(of)g(motion.)35 b(Primarily)-7 b(,)22 b(a)g(functional)h(program)e
(is)h(fundamen)n(tal)150 3768 y(for)34 b(the)g(en)n(tire)g(pro)r(cess,)
g(that)h(should)f(b)r(e)g(able)g(to)g(recognize)e(and)i(read)f(t)n(w)n
(o)h(groups)f(of)h(data)f(that)i(output)150 3868 y(from)25
b(b)r(oth)g(HUD)h(and)f(the)h(aircrafts)d(IR)n(Us)i(\(Inertial)g
(Reference)g(Unit\),)i(this)e(step)h(can)e(b)r(e)i(tested)f(based)g(on)
g(if)150 3967 y(the)h(data)e(transmission)g(b)r(eha)n(v)n(es)h
(successfully)f(from)h(the)h(IR)n(Us)f(to)g(the)h(program.)34
b(F)-7 b(or)25 b(the)g(algorithm,)g(whic)n(h)150 4067
y(is)33 b(the)g(core)e(of)i(the)g(calculation,)h(should)e(b)r(e)h(able)
g(to)f(generate)g(the)h(aligning)f(data)g(within)h(one)g(milliradian)
150 4166 y(b)n(y)28 b(taking)g(transitional)g(inputs,)h(and)f(an)g
(ideal)h(algorithm)e(should)h(run)h(within)g(the)g(accepted)f(range)f
(of)i(time)150 4266 y(and)c(complexit)n(y)-7 b(.)36 b(W)-7
b(e)25 b(ma)n(y)g(use)g(unit)h(tests)f(for)f(eac)n(h)h(part)g(of)g(the)
g(algorithm)f(to)h(c)n(hec)n(k)g(whether)g(the)g(data)g(are)150
4366 y(pro)r(cessed)h(correctly)-7 b(,)27 b(and)g(w)n(e)g(ma)n(y)g
(also)g(transform)f(the)i(data)f(in)n(to)h(statistical)f(data)g(for)g
(deep)h(analysis.)p 0 TeXcolorgray 1929 5349 a(1)p 0
TeXcolorgray eop end
%%Page: 2 4
TeXDict begin 2 3 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
142 -316 a
SDict begin H.S end
 142 -316 a 142 -316 a
SDict begin H.R end
 142 -316 a 142 -316
a
SDict begin [/View [/XYZ H.V]/Dest (page.2) cvn /DEST pdfmark end
 142 -316 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
200 642 1500 4 v 1799 642 V 200 741 a Fd(Clien)n(t)28
b(Signature)1005 b(Date)p 200 1127 V 200 1227 a(Dev)n(elop)r(er)p
200 1612 V 200 1712 a(Dev)n(elop)r(er)p 200 2097 V 200
2197 a(Dev)n(elop)r(er)p 0 TeXcolorgray 1929 5349 a(2)p
0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
